<template>
  <div class="app">
    <div class="sidebar">
      <div class="sidebar-item" :class="{ active: currentView === 'home' }" @click="setCurrentView('home')">
        <div class="sidebar-icon">
          <svg viewBox="0 0 24 24" class="home-icon">
            <path d="M12 4 5 10v10h14V10L12 4z" fill="none" stroke="currentColor" stroke-width="1.5"></path>
            <path d="M9 14v6 M15 14v6" stroke="currentColor" stroke-width="1.5"></path>
          </svg>
        </div>
        <div class="sidebar-text">홈</div>
      </div>
      
      <div class="sidebar-item" :class="{ active: currentView === 'shorts' }" @click="setCurrentView('shorts')">
        <div class="sidebar-icon">
          <svg viewBox="0 0 24 24" class="shorts-icon">
            <path d="M10 14.65v-5.3L15 12l-5 2.65zm7.77-4.33c-.77-.32-1.2-.5-1.2-.5L18 9.06c1.84-.96 2.53-3.23 1.56-5.06s-3.24-2.53-5.07-1.56L6 6.94c-1.29.68-2.07 2.04-2 3.49.07 1.42.93 2.67 2.22 3.25.03.01 1.2.5 1.2.5L6 14.93c-1.83.97-2.53 3.24-1.56 5.07.97 1.83 3.24 2.53 5.07 1.56l8.5-4.5c1.29-.68 2.06-2.04 1.99-3.49-.07-1.42-.94-2.68-2.23-3.25zm-.23 5.86l-8.5 4.5c-1.34.71-3.01.2-3.72-1.14-.71-1.34-.2-3.01 1.14-3.72l2.04-1.08v-1.21l-.69-.28-1.11-.46c-.99-.41-1.65-1.35-1.7-2.41-.05-1.06.52-2.06 1.46-2.56l8.5-4.5c1.34-.71 3.01-.2 3.72 1.14.71 1.34.2 3.01-1.14 3.72L15.5 9.26v1.21l1.8.74c.99.41 1.65 1.35 1.7 2.41.05 1.06-.52 2.06-1.46 2.56z"></path>
          </svg>
        </div>
        <div class="sidebar-text">쇼츠</div>
      </div>

      <!-- 전체보기 메뉴 아이템 추가 -->
      <div class="sidebar-item" :class="{ active: currentView === 'all' }" @click="setCurrentView('all')">
        <div class="sidebar-icon">
          <svg viewBox="0 0 24 24" class="all-icon">
            <path d="M3 5v14h18V5H3zm16 12H5V7h14v10zm-2-4h-2v-2h2v2zm-4 0H7v-2h6v2zm4-4h-2V7h2v2zm-4 0H7V7h6v2z"></path>
          </svg>
        </div>
        <div class="sidebar-text">전체보기</div>
      </div>

      <div class="sidebar-item" :class="{ active: currentView === 'history' }" @click="setCurrentView('history')">
        <div class="sidebar-icon">
          <svg viewBox="0 0 24 24" class="history-icon">
            <path d="M13 3c-4.97 0-9 4.03-9 9H1l3.89 3.89.07.14L9 12H6c0-3.87 3.13-7 7-7s7 3.13 7 7-3.13 7-7 7c-1.93 0-3.68-.79-4.94-2.06l-1.42 1.42C8.27 19.99 10.51 21 13 21c4.97 0 9-4.03 9-9s-4.03-9-9-9zm-1 5v5l4.28 2.54.72-1.21-3.5-2.08V8H12z"></path>
          </svg>
        </div>
        <div class="sidebar-text">시청기록</div>
      </div>
    </div>
    
    <nav class="menu-bar">
      <div class="logo-container">
        <div class="youtube-logo">
          <div class="play-button"></div>
          <div class="youtube-text">YouTube<span class="kr">KR</span></div>
        </div>
      </div>
      
      <div class="search-container">
        <form class="search-form" @submit.prevent="searchVideos">
          <input 
            type="text" 
            placeholder="검색" 
            class="search-input" 
            v-model="searchQuery" 
            @focus="handleSearchFocus"
            readonly
          >
          <button type="submit" class="search-button">
            <svg viewBox="0 0 24 24" class="search-icon">
              <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"></path>
            </svg>
          </button>
          <button 
            v-if="searchQuery.trim()" 
            type="button" 
            class="search-clear-button" 
            @click="clearSearch"
            title="검색 초기화"
          >
            <svg viewBox="0 0 24 24" class="clear-icon">
              <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"></path>
            </svg>
          </button>
          
          <!-- 검색 결과 드롭다운 -->
          <div class="search-results-dropdown" v-if="searchQuery.trim() && showSearchResults">
            <div v-if="filteredVideos.length === 0" class="no-results">
              '{{ searchQuery }}'에 대한 결과가 없습니다
            </div>
            <div v-else class="search-results-list">
              <div 
                v-for="(video, index) in filteredVideos" 
                :key="index" 
                class="search-result-item"
                @click="selectSearchResult(video)"
              >
                <div class="search-result-thumbnail">
                  <video :src="video.url" v-if="video.url && !video.isRefreshed"></video>
                  <div class="thumbnail-placeholder" v-else>
                    <svg viewBox="0 0 24 24" class="video-placeholder-icon">
                      <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 14.5v-9l6 4.5-6 4.5z"></path>
                    </svg>
                  </div>
                </div>
                <div class="search-result-info">
                  <div class="search-result-title">{{ video.title }}</div>
                  <div class="search-result-meta">{{ formatDate(video.uploadDate) }} • {{ formatFileSize(video.size) }}</div>
                </div>
              </div>
            </div>
          </div>
        </form>
      </div>
      
      <div class="action-buttons">
        <div class="create-dropdown">
          <button class="create-button" @click="toggleCreateMenu">
            <span class="plus-icon">+</span>
            <span class="create-text">만들기</span>
          </button>
          <div class="dropdown-menu" v-if="showCreateMenu">
            <div class="dropdown-item" @click="openUploadModal">
              <svg viewBox="0 0 24 24" class="upload-icon">
                <path d="M14 13l-4 5V3h-2v15l4-5v3h2v-3z"/>
                <path d="M18 9h-3v2h3v9H6v-9h3V9H6c-1.1 0-2 .9-2 2v9c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2v-9c0-1.1-.9-2-2-2z"/>
              </svg>
              <span>동영상 업로드</span>
            </div>
          </div>
        </div>
        <div class="notification-wrapper">
          <button class="notification-button" @click="() => { showNotificationPanel = !showNotificationPanel }">
            <svg viewBox="0 0 24 24" class="bell-icon">
              <path d="M12 22c1.1 0 2-.9 2-2h-4c0 1.1.9 2 2 2zm6-6v-5c0-3.07-1.64-5.64-4.5-6.32V4c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5v.68C7.63 5.36 6 7.92 6 11v5l-2 2v1h16v-1l-2-2z"></path>
            </svg>
            <span class="notification-badge" v-if="notificationList.length > 0">{{ notificationList.length }}</span>
          </button>
          
          <!-- 알림 패널 -->
          <div class="notification-panel" v-if="showNotificationPanel">
            <div class="notification-panel-header">
              <h3>알림</h3>
              <button class="clear-all" @click="clearAllNotifications" v-if="notificationList.length > 0">모두 지우기</button>
            </div>
            <div class="notification-panel-content">
              <div v-if="notificationList.length === 0" class="no-notifications">
                알림이 없습니다.
              </div>
              <div v-for="(notification, index) in notificationList" :key="index" class="notification-item">
                <div class="notification-item-icon">
                  <svg viewBox="0 0 24 24" class="success-icon">
                    <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"></path>
                  </svg>
                </div>
                <div class="notification-item-content">
                  <div class="notification-item-title">{{ notification.title }}</div>
                  <div class="notification-item-message">{{ notification.message }}</div>
                  <div class="notification-item-time">{{ formatNotificationTime(notification.time) }}</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </nav>
    <div class="main-content">
      <header>
        <div class="search-header" v-if="isSearchActive">
          <h2>
            <span v-if="filteredVideos.length">
              '{{ searchQuery }}' 검색 결과 ({{ filteredVideos.length }}개)
            </span>
            <span v-else>
              '{{ searchQuery }}'에 대한 검색 결과가 없습니다
            </span>
          </h2>
          <button class="reset-search-button" @click="clearSearch">
            <svg viewBox="0 0 24 24" class="reset-icon">
              <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"></path>
            </svg>
            필터링 초기화
          </button>
        </div>
        <div class="view-header" v-if="currentView === 'shorts'">
          <h2>쇼츠</h2>
          <p>50초 이하의 짧은 동영상</p>
        </div>
        <!-- 전체보기 헤더 추가 -->
        <div class="view-header" v-if="currentView === 'all'">
          <h2>전체보기</h2>
          <p>모든 동영상과 쇼츠</p>
        </div>
        <div class="view-header" v-if="currentView === 'history'">
          <div class="view-header-content">
            <h2>시청기록</h2>
            <p>시청한 동영상의 기록이 여기에 표시됩니다</p>
          </div>
          <button v-if="watchHistory.length > 0" class="clear-history-button" @click="confirmClearHistory">
            <svg viewBox="0 0 24 24" class="delete-all-icon">
              <path d="M15 4V3H9v1H4v2h1v13c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2V6h1V4h-5zm2 15H7V6h10v13zM9 8h2v9H9zm4 0h2v9h-2z"></path>
            </svg>
            시청 기록 비우기
          </button>
        </div>
      </header>
      <main>
        <!-- 기존 비디오 컨테이너 -->
        <div class="videos-container" v-if="currentView === 'home'">
          <div v-if="displayVideos.length === 0" class="no-videos">
            동영상이 없습니다. '만들기' 버튼을 클릭하여 첫 동영상을 업로드하세요!
          </div>
          <div v-for="(video, index) in displayVideos" :key="index" class="video-card">
            <div class="video-thumbnail" @click="openVideoDetail(video)">
              <video :src="video.url" controls v-if="video.url"></video>
              <div class="thumbnail-placeholder" v-else>
                <div class="refresh-notice" v-if="video.isRefreshed">
                  <svg viewBox="0 0 24 24" class="refresh-icon">
                    <path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 9h7V2l-2.35 4.35z"/>
                  </svg>
                  <div class="refresh-text">
                    <div>새로고침 후 재생할 수 없습니다.</div>
                    <div>새 비디오를 업로드하세요.</div>
                  </div>
                </div>
                <svg v-else viewBox="0 0 24 24" class="video-placeholder-icon">
                  <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 14.5v-9l6 4.5-6 4.5z"></path>
                </svg>
              </div>
              <button class="video-delete-button" @click.stop="deleteVideo(video.id)" title="삭제">
                <svg viewBox="0 0 24 24" class="trash-icon">
                  <path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"></path>
                </svg>
              </button>
            </div>
            <div class="video-info" @click="openVideoDetail(video)">
              <div class="video-header">
                <h3 class="video-title">{{ video.title || '제목 없음' }}</h3>
              </div>
              <p class="video-details">
                {{ formatDate(video.uploadDate) }} 
                <span class="video-size">{{ formatFileSize(video.size) }}</span>
              </p>
            </div>
          </div>
        </div>

        <!-- 전체보기 컨테이너 추가 -->
        <div class="all-videos-container" v-if="currentView === 'all'">
          <div v-if="allVideos.length === 0" class="no-videos">
            동영상이 없습니다. '만들기' 버튼을 클릭하여 첫 동영상을 업로드하세요!
          </div>
          
          <div class="all-videos-section">
            <h3 class="section-title">일반 동영상</h3>
            <div class="all-videos-grid">
              <div v-for="(video, index) in normalVideos" :key="index" class="video-card">
                <div class="video-thumbnail" @click="openVideoDetail(video)">
                  <video :src="video.url" controls v-if="video.url && !video.isRefreshed"></video>
                  <div class="thumbnail-placeholder" v-else>
                    <div class="refresh-notice" v-if="video.isRefreshed">
                      <svg viewBox="0 0 24 24" class="refresh-icon">
                        <path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 9h7V2l-2.35 4.35z"/>
                      </svg>
                      <div class="refresh-text">
                        <div>새로고침 후 재생할 수 없습니다.</div>
                        <div>새 비디오를 업로드하세요.</div>
                      </div>
                    </div>
                    <svg v-else viewBox="0 0 24 24" class="video-placeholder-icon">
                      <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 14.5v-9l6 4.5-6 4.5z"></path>
                    </svg>
                  </div>
                  <button class="video-delete-button" @click.stop="deleteVideo(video.id)" title="삭제">
                    <svg viewBox="0 0 24 24" class="trash-icon">
                      <path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"></path>
                    </svg>
                  </button>
                </div>
                <div class="video-info" @click="openVideoDetail(video)">
                  <div class="video-header">
                    <h3 class="video-title">{{ video.title || '제목 없음' }}</h3>
                  </div>
                  <p class="video-details">
                    {{ formatDate(video.uploadDate) }} 
                    <span class="video-size">{{ formatFileSize(video.size) }}</span>
                  </p>
                </div>
              </div>
            </div>
          </div>
          
          <div class="all-shorts-section">
            <h3 class="section-title">쇼츠</h3>
            <div class="all-shorts-grid">
              <div v-for="(video, index) in shortsVideos" :key="index" class="shorts-card">
                <div class="shorts-thumbnail" @click="openVideoDetail(video)">
                  <video 
                    :src="video.url" 
                    controls 
                    loop 
                    muted 
                    controlsList="nodownload nofullscreen" 
                    v-if="video.url && !video.isRefreshed" 
                    @click.stop="togglePlay($event)"
                  ></video>
                  <div class="thumbnail-placeholder" v-else>
                    <div class="refresh-notice" v-if="video.isRefreshed">
                      <svg viewBox="0 0 24 24" class="refresh-icon">
                        <path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 9h7V2l-2.35 4.35z"/>
                      </svg>
                      <div class="refresh-text">
                        <div>새로고침 후 재생할 수 없습니다.</div>
                        <div>새 비디오를 업로드하세요.</div>
                      </div>
                    </div>
                    <svg v-else viewBox="0 0 24 24" class="video-placeholder-icon">
                      <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 14.5v-9l6 4.5-6 4.5z"></path>
                    </svg>
                  </div>
                  <button class="shorts-menu-button" @click.stop="openShortsMenu(video.id)">
                    <svg viewBox="0 0 24 24" class="menu-icon">
                      <path d="M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"></path>
                    </svg>
                  </button>
                  <div v-if="activeMenuId === video.id" class="shorts-menu-dropdown">
                    <div class="menu-item" @click="confirmDeleteShorts(video.id)">
                      <svg viewBox="0 0 24 24" class="delete-icon">
                        <path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"></path>
                      </svg>
                      <span>삭제</span>
                    </div>
                  </div>
                </div>
                <div class="shorts-info" @click="openVideoDetail(video)">
                  <div class="shorts-header">
                    <h3 class="shorts-title">{{ video.title || '제목 없음' }}</h3>
                  </div>
                  <p class="shorts-details">
                    <span class="shorts-channel">@{{video.title.substring(0, 4)}} </span>
                    <span class="shorts-duration">{{ formatDuration(video.duration) }}</span>
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- 쇼츠 컨테이너 추가 -->
        <div class="shorts-container" v-if="currentView === 'shorts'">
          <div v-if="shortsVideos.length === 0" class="no-videos shorts-no-videos">
            쇼츠가 없습니다. '만들기' 버튼을 클릭하여 짧은 동영상을 업로드하세요!
          </div>
          <div class="shorts-list" v-else>
            <div v-for="(video, index) in shortsVideos" :key="index" class="shorts-card">
              <div class="shorts-thumbnail" @click="openVideoDetail(video)">
                <video 
                  :src="video.url" 
                  controls 
                  loop 
                  muted 
                  controlsList="nodownload nofullscreen" 
                  v-if="video.url && !video.isRefreshed" 
                  @click.stop="togglePlay($event)"
                ></video>
                <div class="thumbnail-placeholder" v-else>
                  <div class="refresh-notice" v-if="video.isRefreshed">
                    <svg viewBox="0 0 24 24" class="refresh-icon">
                      <path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 9h7V2l-2.35 4.35z"/>
                    </svg>
                    <div class="refresh-text">
                      <div>새로고침 후 재생할 수 없습니다.</div>
                      <div>새 비디오를 업로드하세요.</div>
                    </div>
                  </div>
                  <svg v-else viewBox="0 0 24 24" class="video-placeholder-icon">
                    <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 14.5v-9l6 4.5-6 4.5z"></path>
                  </svg>
                </div>
                
                <!-- 쇼츠 옵션 메뉴 버튼 (점 세 개) -->
                <button class="shorts-menu-button" @click.stop="openShortsMenu(video.id)">
                  <svg viewBox="0 0 24 24" class="menu-icon">
                    <path d="M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"></path>
                  </svg>
                </button>
                
                <!-- 쇼츠 옵션 메뉴 드롭다운 -->
                <div v-if="activeMenuId === video.id" class="shorts-menu-dropdown">
                  <div class="menu-item" @click="confirmDeleteShorts(video.id)">
                    <svg viewBox="0 0 24 24" class="delete-icon">
                      <path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"></path>
                    </svg>
                    <span>삭제</span>
                  </div>
                </div>
                
                <div class="shorts-controls">
                  <div class="shorts-like">
                    <svg viewBox="0 0 24 24" class="like-icon">
                      <path d="M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-1.91l-.01-.01L23 10z"></path>
                    </svg>
                    <span>좋아요</span>
                  </div>
                  <div class="shorts-dislike">
                    <svg viewBox="0 0 24 24" class="dislike-icon">
                      <path d="M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v1.91l.01.01L1 14c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z"></path>
                    </svg>
                    <span>싫어요</span>
                  </div>
                  <div class="shorts-comment">
                    <svg viewBox="0 0 24 24" class="comment-icon">
                      <path d="M21.99 4c0-1.1-.89-2-1.99-2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14l4 4-.01-18zM18 14H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z"></path>
                    </svg>
                    <span>댓글</span>
                  </div>
                  <div class="shorts-share">
                    <svg viewBox="0 0 24 24" class="share-icon">
                      <path d="M18 16.08c-.76 0-1.44.3-1.96.77L8.91 12.7c.05-.23.09-.46.09-.7s-.04-.47-.09-.7l7.05-4.11c.54.5 1.25.81 2.04.81 1.66 0 3-1.34 3-3s-1.34-3-3-3-3 1.34-3 3c0 .24.04.47.09.7L8.04 9.81C7.5 9.31 6.79 9 6 9c-1.66 0-3 1.34-3 3s1.34 3 3 3c.79 0 1.5-.31 2.04-.81l7.12 4.16c-.05.21-.08.43-.08.65 0 1.61 1.31 2.92 2.92 2.92 1.61 0 2.92-1.31 2.92-2.92s-1.31-2.92-2.92-2.92z"></path>
                    </svg>
                    <span>공유</span>
                  </div>
                </div>
              </div>
              <div class="shorts-info" @click="openVideoDetail(video)">
                <div class="shorts-header">
                  <h3 class="shorts-title">{{ video.title || '제목 없음' }}</h3>
                </div>
                <p class="shorts-details">
                  <span class="shorts-channel">@{{video.title.substring(0, 4)}} </span>
                  <span class="shorts-duration">{{ formatDuration(video.duration) }}</span>
                </p>
              </div>
            </div>
          </div>
        </div>
        
        <!-- 삭제 확인 모달 -->
        <div class="modal-overlay" v-if="showDeleteModal" @click="cancelDelete"></div>
        <div class="delete-modal" v-if="showDeleteModal">
          <div class="modal-header">
            <h2>쇼츠 삭제</h2>
            <button class="close-button" @click="cancelDelete">×</button>
          </div>
          <div class="modal-content">
            <p>이 쇼츠를 삭제하시겠습니까?</p>
            <div class="delete-actions">
              <button class="cancel-button" @click="cancelDelete">취소</button>
              <button class="delete-button" @click="confirmDelete">삭제</button>
            </div>
          </div>
        </div>

        <!-- 시청기록 컨테이너 -->
        <div class="videos-container" v-if="currentView === 'history'">
          <div v-if="watchHistory.length === 0" class="no-videos">
            시청 기록이 없습니다. 동영상을 시청하면 이곳에 표시됩니다.
          </div>
          <div v-else>
            <div v-for="(item, index) in watchHistory" :key="index" class="video-card history-item">
              <div class="video-thumbnail" @click="openVideoDetail(item.video)">
                <video :src="item.video.url" controls v-if="item.video.url && !item.video.isRefreshed"></video>
                <div class="thumbnail-placeholder" v-else>
                  <div class="refresh-notice" v-if="item.video.isRefreshed">
                    <svg viewBox="0 0 24 24" class="refresh-icon">
                      <path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 9h7V2l-2.35 4.35z"/>
                    </svg>
                    <div class="refresh-text">
                      <div>새로고침 후 재생할 수 없습니다.</div>
                      <div>새 비디오를 업로드하세요.</div>
                    </div>
                  </div>
                  <svg v-else viewBox="0 0 24 24" class="video-placeholder-icon">
                    <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 14.5v-9l6 4.5-6 4.5z"></path>
                  </svg>
                </div>
                <div class="video-badge" v-if="item.video.isShort">쇼츠</div>
              </div>
              <div class="video-info">
                <div class="video-header">
                  <h3 class="video-title">{{ item.video.title || '제목 없음' }}</h3>
                </div>
                <p class="video-details">
                  <span class="watched-date">{{ formatDate(item.watchedAt) }} 시청</span>
                  <span class="video-duration" v-if="item.video.duration">{{ formatDuration(item.video.duration) }}</span>
                </p>
                <button class="remove-history-button" @click="removeFromHistory(item.id)" title="기록에서 삭제">
                  <svg viewBox="0 0 24 24" class="remove-icon">
                    <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"></path>
                  </svg>
                  기록에서 삭제
                </button>
              </div>
            </div>
          </div>
        </div>
      </main>
    </div>
    
    <!-- 비디오 업로드 모달 -->
    <div class="modal-overlay" v-if="showUploadModal" @click="closeModal"></div>
    <div class="upload-modal" v-if="showUploadModal">
      <div class="modal-header">
        <h2>동영상 업로드</h2>
        <button class="close-button" @click="closeModal">×</button>
      </div>
      <div class="modal-content">
        <div class="upload-area" @click="triggerFileInput" @drop.prevent="handleFileDrop" @dragover.prevent>
          <svg viewBox="0 0 24 24" class="upload-cloud-icon">
            <path d="M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM14 13v4h-4v-4H7l5-5 5 5h-3z" />
          </svg>
          <h3>동영상 업로드하기</h3>
          <p>클릭하여 파일을 선택하거나 드래그 앤 드롭하세요</p>
          <input 
            type="file" 
            accept="video/*" 
            class="file-input" 
            ref="fileInput"
            @change="handleFileChange" 
            style="display: none" 
          >
        </div>
        <div class="video-details-form" v-if="selectedFile">
          <div class="form-group">
            <label for="video-title">동영상 제목</label>
            <input 
              type="text" 
              id="video-title" 
              v-model="videoTitle" 
              placeholder="제목을 입력하세요" 
              class="title-input"
            >
          </div>
          <div class="file-info">
            <div class="file-name">{{ selectedFile.name }}</div>
            <div class="file-size">{{ formatFileSize(selectedFile.size) }}</div>
          </div>
          <div class="upload-actions">
            <button class="cancel-button" @click="closeModal">취소</button>
            <button class="upload-button" @click="uploadVideo">업로드</button>
          </div>
        </div>
        <div class="upload-progress" v-if="uploading">
          <div class="progress-bar">
            <div class="progress-fill" :style="{width: uploadProgress + '%'}"></div>
          </div>
          <div class="progress-text">{{uploadProgress}}% 완료</div>
        </div>
      </div>
    </div>
    
    <!-- 알림 창 -->
    <div class="notification-container" v-if="notification.show">
      <div class="notification" :class="notification.type">
        <div class="notification-icon">
          <svg v-if="notification.type === 'success'" viewBox="0 0 24 24" class="success-icon">
            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"></path>
          </svg>
          <svg v-if="notification.type === 'error'" viewBox="0 0 24 24" class="error-icon">
            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z"></path>
          </svg>
        </div>
        <div class="notification-content">
          <div class="notification-title">{{ notification.title }}</div>
          <div class="notification-message">{{ notification.message }}</div>
        </div>
        <button class="notification-close" @click="closeNotification">
          <svg viewBox="0 0 24 24" class="close-icon">
            <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"></path>
          </svg>
        </button>
      </div>
    </div>
    
    <!-- 검색 페이지 -->
    <Search 
      v-if="showSearchPage" 
      :videos="videos" 
      @back="closeSearchPage" 
      @selectVideo="selectSearchResult"
    />

    <!-- 비디오 상세 모달 -->
    <div class="modal-overlay" v-if="showVideoDetailModal" @click="closeVideoDetail"></div>
    <div class="video-detail-modal" v-if="showVideoDetailModal">
      <div class="modal-header">
        <h2>{{ selectedVideo.title || '제목 없음' }}</h2>
        <button class="close-button" @click="closeVideoDetail">×</button>
      </div>
      <div class="modal-content">
        <div class="video-player">
          <video 
            :src="selectedVideo.url" 
            controls 
            autoplay 
            v-if="selectedVideo.url && !selectedVideo.isRefreshed" 
            ref="videoPlayer"
            @timeupdate="updateVideoProgress"
            @ended="handleVideoEnded"
          ></video>
          <div class="thumbnail-placeholder" v-else>
            <div class="refresh-notice" v-if="selectedVideo.isRefreshed">
              <svg viewBox="0 0 24 24" class="refresh-icon">
                <path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 9h7V2l-2.35 4.35z"/>
              </svg>
              <div class="refresh-text">
                <div>새로고침 후 재생할 수 없습니다.</div>
                <div>새 비디오를 업로드하세요.</div>
              </div>
            </div>
            <svg v-else viewBox="0 0 24 24" class="video-placeholder-icon">
              <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 14.5v-9l6 4.5-6 4.5z"></path>
            </svg>
          </div>
        </div>
        <div class="video-detail-info">
          <div class="video-detail-top">
            <div class="video-detail-title">{{ selectedVideo.title || '제목 없음' }}</div>
            <div class="video-detail-views">{{ selectedVideo.views || 0 }}회 시청</div>
          </div>
          <div class="video-detail-meta">
            <div class="video-detail-date">{{ formatDate(selectedVideo.uploadDate) }}</div>
            <div class="video-detail-size">{{ formatFileSize(selectedVideo.size) }}</div>
          </div>
        </div>
        
        <div class="video-recommendations" v-if="recommendedVideos.length > 0">
          <h3>다음 동영상</h3>
          <div class="recommended-videos">
            <div 
              v-for="(video, index) in recommendedVideos" 
              :key="index" 
              class="recommended-video"
              @click="changeVideo(video)"
            >
              <div class="recommended-thumbnail">
                <video :src="video.url" v-if="video.url && !video.isRefreshed"></video>
                <div class="thumbnail-placeholder" v-else>
                  <svg viewBox="0 0 24 24" class="video-placeholder-icon">
                    <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 14.5v-9l6 4.5-6 4.5z"></path>
                  </svg>
                </div>
                <span class="recommended-duration" v-if="video.duration">{{ formatDuration(video.duration) }}</span>
              </div>
              <div class="recommended-info">
                <div class="recommended-title">{{ video.title || '제목 없음' }}</div>
                <div class="recommended-meta">{{ formatDate(video.uploadDate) }}</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- 시청 기록 비우기 확인 모달 -->
    <div class="modal-overlay" v-if="showClearHistoryModal" @click="cancelClearHistory"></div>
    <div class="delete-modal" v-if="showClearHistoryModal">
      <div class="modal-header">
        <h2>시청 기록 비우기</h2>
        <button class="close-button" @click="cancelClearHistory">×</button>
      </div>
      <div class="modal-content">
        <p>모든 시청 기록을 삭제하시겠습니까? 이 작업은 되돌릴 수 없습니다.</p>
        <div class="delete-actions">
          <button class="cancel-button" @click="cancelClearHistory">취소</button>
          <button class="delete-button" @click="clearAllHistory">삭제</button>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, onMounted, computed, watch, nextTick } from 'vue'
import Search from './Search.vue'

// 비디오 데이터베이스 관리 객체
const videoDB = {
  db: null as IDBDatabase | null,

  // DB 초기화
  async init() {
    return new Promise<void>((resolve, reject) => {
      // 데이터베이스 버전 업그레이드를 위해 높은 버전 번호 사용
      const request = indexedDB.open('videoDatabase', 3);
      
      request.onerror = (event) => {
        console.error('IndexedDB 열기 실패:', event);
        reject(new Error('IndexedDB 열기 실패'));
      };
      
      request.onupgradeneeded = (event) => {
        console.log('IndexedDB 업그레이드 중...');
        const db = (event.target as IDBOpenDBRequest).result;
        
        // 비디오 저장소 생성
        if (!db.objectStoreNames.contains('videos')) {
          console.log('videos 저장소 생성');
          db.createObjectStore('videos', { keyPath: 'id' });
        }
        
        // 쇼츠 저장소 생성
        if (!db.objectStoreNames.contains('shorts')) {
          console.log('shorts 저장소 생성');
          db.createObjectStore('shorts', { keyPath: 'id' });
        }

        // 시청기록 저장소 생성
        if (!db.objectStoreNames.contains('history')) {
          console.log('history 저장소 생성');
          db.createObjectStore('history', { keyPath: 'id', autoIncrement: true });
        }
      };
      
      request.onsuccess = (event) => {
        this.db = (event.target as IDBOpenDBRequest).result;
        console.log('IndexedDB 연결 성공, 버전:', this.db.version);
        
        // 모든 객체 저장소가 있는지 확인
        const storeNames = Array.from(this.db.objectStoreNames);
        console.log('현재 저장소 목록:', storeNames);
        
        if (!storeNames.includes('history')) {
          console.warn('history 저장소가 없습니다. 데이터베이스를 재생성합니다.');
          
          // 데이터베이스 닫기
          this.db.close();
          this.db = null;
          
          // 데이터베이스 삭제 후 재생성
          const deleteRequest = indexedDB.deleteDatabase('videoDatabase');
          deleteRequest.onsuccess = () => {
            console.log('데이터베이스 삭제 성공, 재생성 중...');
            setTimeout(() => {
              // 약간의 지연 후 재시도
              this.init()
                .then(resolve)
                .catch(reject);
            }, 100);
          };
          
          deleteRequest.onerror = (event) => {
            console.error('데이터베이스 삭제 실패:', event);
            reject(new Error('데이터베이스 삭제 실패'));
          };
        } else {
          resolve();
        }
      };
    });
  },
  
  // 비디오 저장
  async saveVideo(video: any, isShort: boolean = false) {
    return new Promise<void>((resolve, reject) => {
      if (!this.db) {
        reject(new Error('데이터베이스가 초기화되지 않았습니다'));
        return;
      }
      
      const storeName = isShort ? 'shorts' : 'videos';
      const transaction = this.db.transaction([storeName], 'readwrite');
      const store = transaction.objectStore(storeName);
      
      const request = store.put(video);
      
      request.onerror = () => {
        reject(new Error('비디오 저장 실패'));
      };
      
      request.onsuccess = () => {
        resolve();
      };
    });
  },
  
  // 모든 비디오 가져오기
  async getAllVideos(isShorts: boolean = false) {
    return new Promise<any[]>((resolve, reject) => {
      if (!this.db) {
        reject(new Error('데이터베이스가 초기화되지 않았습니다'));
        return;
      }
      
      const storeName = isShorts ? 'shorts' : 'videos';
      const transaction = this.db.transaction([storeName], 'readonly');
      const store = transaction.objectStore(storeName);
      
      const request = store.getAll();
      
      request.onerror = () => {
        reject(new Error('비디오 가져오기 실패'));
      };
      
      request.onsuccess = () => {
        resolve(request.result);
      };
    });
  },
  
  // 비디오 삭제
  async deleteVideo(id: string, isShort: boolean = false) {
    return new Promise<void>((resolve, reject) => {
      if (!this.db) {
        reject(new Error('데이터베이스가 초기화되지 않았습니다'));
        return;
      }
      
      const storeName = isShort ? 'shorts' : 'videos';
      const transaction = this.db.transaction([storeName], 'readwrite');
      const store = transaction.objectStore(storeName);
      
      const request = store.delete(id);
      
      request.onerror = () => {
        reject(new Error('비디오 삭제 실패'));
      };
      
      request.onsuccess = () => {
        resolve();
      };
    });
  },
  
  // 모든 비디오 삭제
  async clearAll() {
    return new Promise<void>((resolve, reject) => {
      if (!this.db) {
        reject(new Error('데이터베이스가 초기화되지 않았습니다'));
        return;
      }
      
      const transaction = this.db.transaction(['videos', 'shorts'], 'readwrite');
      const videoStore = transaction.objectStore('videos');
      const shortsStore = transaction.objectStore('shorts');
      
      videoStore.clear();
      shortsStore.clear();
      
      transaction.oncomplete = () => {
        resolve();
      };
      
      transaction.onerror = () => {
        reject(new Error('비디오 데이터 초기화 실패'));
      };
    });
  },
  
  // 시청기록 저장
  async addToHistory(video: any) {
    return new Promise<void>((resolve, reject) => {
      if (!this.db) {
        reject(new Error('데이터베이스가 초기화되지 않았습니다'));
        return;
      }
      
      try {
        // 'history' 스토어가 있는지 확인
        if (!Array.from(this.db.objectStoreNames).includes('history')) {
          console.error('history 저장소가 없습니다');
          reject(new Error('history 저장소가 없습니다'));
          return;
        }
        
        const transaction = this.db.transaction(['history'], 'readwrite');
        const store = transaction.objectStore('history');
        
        // 시청기록 아이템
        const historyItem = {
          video: { ...video },
          watchedAt: new Date(),
          isShort: video.duration <= 50
        };
        
        const request = store.add(historyItem);
        
        request.onerror = () => {
          reject(new Error('시청기록 저장 실패'));
        };
        
        request.onsuccess = () => {
          resolve();
        };
      } catch (error) {
        console.error('addToHistory 실행 중 오류:', error);
        reject(error);
      }
    });
  },
  
  // 모든 시청기록 가져오기
  async getHistory() {
    return new Promise<any[]>((resolve, reject) => {
      if (!this.db) {
        reject(new Error('데이터베이스가 초기화되지 않았습니다'));
        return;
      }
      
      try {
        // 먼저 'history' 스토어가 있는지 확인
        if (!Array.from(this.db.objectStoreNames).includes('history')) {
          console.error('history 저장소가 없습니다');
          resolve([]);
          return;
        }
        
        const transaction = this.db.transaction(['history'], 'readonly');
        const store = transaction.objectStore('history');
        
        const request = store.getAll();
        
        request.onerror = () => {
          reject(new Error('시청기록 가져오기 실패'));
        };
        
        request.onsuccess = () => {
          resolve(request.result);
        };
      } catch (error) {
        console.error('getHistory 실행 중 오류:', error);
        resolve([]);
      }
    });
  },
  
  // 시청기록 삭제
  async removeFromHistory(id: number) {
    return new Promise<void>((resolve, reject) => {
      if (!this.db) {
        reject(new Error('데이터베이스가 초기화되지 않았습니다'));
        return;
      }
      
      try {
        // 'history' 스토어가 있는지 확인
        if (!Array.from(this.db.objectStoreNames).includes('history')) {
          console.error('history 저장소가 없습니다');
          reject(new Error('history 저장소가 없습니다'));
          return;
        }
        
        const transaction = this.db.transaction(['history'], 'readwrite');
        const store = transaction.objectStore('history');
        
        const request = store.delete(id);
        
        request.onerror = () => {
          reject(new Error('시청기록 삭제 실패'));
        };
        
        request.onsuccess = () => {
          resolve();
        };
      } catch (error) {
        console.error('removeFromHistory 실행 중 오류:', error);
        reject(error);
      }
    });
  },

  // 모든 시청기록 삭제
  async clearHistory() {
    return new Promise<void>((resolve, reject) => {
      if (!this.db) {
        reject(new Error('데이터베이스가 초기화되지 않았습니다'));
        return;
      }
      
      try {
        // 'history' 스토어가 있는지 확인
        if (!Array.from(this.db.objectStoreNames).includes('history')) {
          console.error('history 저장소가 없습니다');
          reject(new Error('history 저장소가 없습니다'));
          return;
        }
        
        const transaction = this.db.transaction(['history'], 'readwrite');
        const store = transaction.objectStore('history');
        
        const request = store.clear();
        
        request.onerror = () => {
          reject(new Error('시청기록 초기화 실패'));
        };
        
        request.onsuccess = () => {
          resolve();
        };
      } catch (error) {
        console.error('clearHistory 실행 중 오류:', error);
        reject(error);
      }
    });
  }
};

const showCreateMenu = ref(false);
const showUploadModal = ref(false);
const fileInput = ref<HTMLInputElement | null>(null);
const selectedFile = ref<File | null>(null);
const uploading = ref(false);
const uploadProgress = ref(0);
const videos = ref<Array<{
  id: string,
  title: string,
  url: string | null,
  blob?: Blob,
  size: number,
  uploadDate: Date,
  isRefreshed: boolean,
  duration?: number
}>>([]);
const videoTitle = ref('');
const videoUrl = ref<string | null>(null);
const activeVideoMenu = ref<string | null>(null);
const notification = ref({
  show: false,
  type: 'success',
  title: '',
  message: '',
  timeout: null as number | null
});
const notificationList = ref<Array<{
  id?: string,
  title: string,
  message: string,
  type?: 'success' | 'error',
  time: Date,
  read?: boolean
}>>([]);
const showNotificationPanel = ref(false);
const searchQuery = ref('');
const isSearchActive = ref(false);
const showSearchResults = ref(false);
const showSearchPage = ref(false);
const currentView = ref('home');
const filteredVideos = ref<Array<any>>([]);
// shortsVideos ref 선언을 완전히 제거
// const shortsVideos = ref<Array<{
//   id: string,
//   title: string,
//   url: string | null,
//   blob?: Blob,
//   size: number,
//   uploadDate: Date,
//   isRefreshed: boolean,
//   duration: number
// }>>([]);

// 변수 추가
const activeMenuId = ref<string | null>(null);
const showDeleteModal = ref(false);
const deletingVideoId = ref<string | null>(null);
const dbInitialized = ref(false);

// 시청기록 관련 변수
const watchHistory = ref<Array<{
  id?: number,
  video: any,
  watchedAt: Date,
  isShort?: boolean
}>>([]);

// 비디오 상세 보기 관련 변수
const showVideoDetailModal = ref(false);
const selectedVideo = ref<any>({});

// 시청 기록 비우기 관련 변수
const showClearHistoryModal = ref(false);

// IndexedDB 초기화 및 데이터 로드
onMounted(async () => {
  try {
    // 데이터베이스 삭제 코드를 제거합니다
    // 브라우저 저장소 삭제 (문제 해결용)
    // try {
    //   // 기존 데이터베이스 삭제
    //   await new Promise<void>((resolve, reject) => {
    //     const deleteRequest = indexedDB.deleteDatabase('videoDatabase');
    //     deleteRequest.onsuccess = () => {
    //       console.log('기존 데이터베이스 삭제 성공');
    //       resolve();
    //     };
    //     deleteRequest.onerror = () => {
    //       console.error('데이터베이스 삭제 실패');
    //       reject();
    //     };
    //   });
    //   console.log('스토리지 초기화 완료');
    // } catch (e) {
    //   console.error('스토리지 초기화 실패:', e);
    // }
    
    // 재초기화
    await videoDB.init();
    dbInitialized.value = true;
    
    // IndexedDB에서 비디오 데이터 로드
    await loadVideosFromIndexedDB();
    
    // 시청 기록 로드
    try {
      await loadHistoryFromIndexedDB();
    } catch (error) {
      console.error('시청 기록 로드 실패, 로컬 스토리지로 대체:', error);
      loadHistoryFromLocalStorage();
    }
    
    // 알림 데이터 로드
    loadNotificationsFromStorage();
    
    // 문서 클릭 이벤트 처리 (알림 패널 외부 클릭 시 닫기)
    document.addEventListener('click', (event) => {
      const target = event.target as HTMLElement;
      const notificationPanel = document.querySelector('.notification-panel');
      const notificationButton = document.querySelector('.notification-button');
      
      if (showNotificationPanel.value && 
          notificationPanel && 
          notificationButton && 
          !notificationPanel.contains(target) && 
          !notificationButton.contains(target)) {
        showNotificationPanel.value = false;
      }
      
      // 검색 결과 드롭다운 외부 클릭 시 닫기
      const searchForm = document.querySelector('.search-form');
      if (showSearchResults.value && 
          searchForm && 
          !searchForm.contains(target)) {
        showSearchResults.value = false;
      }
      
      // 메뉴 드롭다운 외부 클릭 시 닫기
      if (activeMenuId.value !== null && !event.composedPath().some(el => {
          const elem = el as HTMLElement;
          return elem.classList && (elem.classList.contains('shorts-menu-button') || elem.classList.contains('shorts-menu-dropdown'));
      })) {
        activeMenuId.value = null;
      }
      
      // 만들기 메뉴 외부 클릭 시 닫기
      if (showCreateMenu.value && !event.composedPath().some(el => {
          const elem = el as HTMLElement;
          return elem.classList && (elem.classList.contains('create-button') || elem.classList.contains('dropdown-menu'));
      })) {
        showCreateMenu.value = false;
      }
    });
  } catch (error) {
    console.error('IndexedDB 초기화 실패:', error);
    // IndexedDB를 사용할 수 없는 경우 로컬 스토리지에서 메타데이터만 로드
    loadVideosFromLocalStorage();
    loadHistoryFromLocalStorage();
  }
});

// IndexedDB에서 비디오 데이터 로드
const loadVideosFromIndexedDB = async () => {
  try {
    if (!dbInitialized.value) return;
    
    // 일반 비디오 로드
    const videoData = await videoDB.getAllVideos(false);
    videos.value = videoData.map(video => {
      // Blob에서 URL 생성
      let url = null;
      if (video.blob) {
        url = URL.createObjectURL(video.blob);
      }
      
      return {
        ...video,
        url,
        uploadDate: new Date(video.uploadDate),
        isRefreshed: false
      };
    });
    
    // shortsVideos를 이제 computed 속성으로 처리하므로 여기서는 따로 로드하지 않습니다
    // 쇼츠 비디오 로드
    // const shortsData = await videoDB.getAllVideos(true);
    // shortsVideos.value = shortsData.map(video => {
    //   // Blob에서 URL 생성
    //   let url = null;
    //   if (video.blob) {
    //     url = URL.createObjectURL(video.blob);
    //   }
    //   
    //   return {
    //     ...video,
    //     url,
    //     uploadDate: new Date(video.uploadDate),
    //     isRefreshed: false
    //   };
    // });
    
    console.log('비디오 데이터 로드 완료:', videos.value.length, '개 비디오');
  } catch (error) {
    console.error('IndexedDB에서 비디오 로드 실패:', error);
    // 오류 발생 시 로컬 스토리지에서 메타데이터만 로드
    loadVideosFromLocalStorage();
  }
};

// 로컬 스토리지에서 동영상 정보 불러오는 함수 (IndexedDB 사용 불가 시 대체)
const loadVideosFromLocalStorage = () => {
  const storedVideos = localStorage.getItem('uploadedVideos');
  if (storedVideos) {
    try {
      const parsedVideos = JSON.parse(storedVideos);
      videos.value = parsedVideos.map((video: any) => ({
        ...video,
        uploadDate: new Date(video.uploadDate),
        url: null, // 새로고침 후에는 URL을 null로 설정
        isRefreshed: true
      }));
    } catch (e) {
      console.error('Failed to parse videos from localStorage', e);
    }
  }

  // 쇼츠 비디오는 이제 computed 속성으로 처리하므로 여기서는 따로 로드하지 않습니다
  // // 쇼츠 비디오 처리 (50초 이하)
  // const storedShorts = localStorage.getItem('shortsVideos');
  // if (storedShorts) {
  //   try {
  //     const parsedShorts = JSON.parse(storedShorts);
  //     shortsVideos.value = parsedShorts.map((video: any) => ({
  //       ...video,
  //       uploadDate: new Date(video.uploadDate),
  //       url: null, // 새로고침 후에는 URL을 null로 설정
  //       isRefreshed: true
  //     }));
  //   } catch (e) {
  //     console.error('Failed to parse shorts from localStorage', e);
  //   }
  // }
};

// 메타데이터 저장 (IndexedDB 오류 시 대체)
const saveVideosToLocalStorage = () => {
  // URL 정보는 제외하고 저장 (새로고침 후 사용할 수 없기 때문)
  const videosToSave = videos.value.map(video => {
    const { url, blob, isRefreshed, ...rest } = video;
    return rest;
  });
  
  localStorage.setItem('uploadedVideos', JSON.stringify(videosToSave));
  
  // 쇼츠는 이제 videos 배열에서 필터링하므로 별도로 저장할 필요가 없습니다
  // const shortsToSave = shortsVideos.value.map(video => {
  //   const { url, blob, isRefreshed, ...rest } = video;
  //   return rest;
  // });
  // localStorage.setItem('shortsVideos', JSON.stringify(shortsToSave));
};

const toggleCreateMenu = () => {
  showCreateMenu.value = !showCreateMenu.value;
};

const openUploadModal = () => {
  showUploadModal.value = true;
  showCreateMenu.value = false;
};

const closeModal = () => {
  showUploadModal.value = false;
  selectedFile.value = null;
  uploading.value = false;
  uploadProgress.value = 0;
  videoTitle.value = '';
  videoUrl.value = null;
};

const triggerFileInput = () => {
  fileInput.value?.click();
};

const handleFileChange = (event: Event) => {
  const input = event.target as HTMLInputElement;
  if (input.files && input.files.length > 0) {
    selectedFile.value = input.files[0];
    videoTitle.value = selectedFile.value.name.split('.')[0] || '제목 없음';
  }
};

const handleFileDrop = (event: DragEvent) => {
  if (event.dataTransfer?.files && event.dataTransfer.files.length > 0) {
    selectedFile.value = event.dataTransfer.files[0];
    videoTitle.value = selectedFile.value.name.split('.')[0] || '제목 없음';
  }
};

const formatFileSize = (bytes: number): string => {
  if (bytes === 0) return '0 Bytes';
  
  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
  const i = Math.floor(Math.log(bytes) / Math.log(1024));
  
  return parseFloat((bytes / Math.pow(1024, i)).toFixed(2)) + ' ' + sizes[i];
};

const formatDate = (date: Date): string => {
  const now = new Date();
  const diffMs = now.getTime() - date.getTime();
  const diffSec = Math.floor(diffMs / 1000);
  const diffMin = Math.floor(diffSec / 60);
  const diffHour = Math.floor(diffMin / 60);
  const diffDay = Math.floor(diffHour / 24);
  const diffMonth = (now.getMonth() + 12 * now.getFullYear()) - (date.getMonth() + 12 * date.getFullYear());
  const diffYear = now.getFullYear() - date.getFullYear();
  
  if (diffSec < 60) return '방금 전';
  if (diffMin < 60) return `${diffMin}분 전`;
  if (diffHour < 24) return `${diffHour}시간 전`;
  if (diffDay < 30) return `${diffDay}일 전`;
  if (diffMonth < 12) return `${diffMonth}개월 전`;
  return `${diffYear}년 전`;
};

const cancelUpload = () => {
  selectedFile.value = null;
  videoTitle.value = '';
};

const showNotification = (type: 'success' | 'error', title: string, message: string, duration: number = 4000) => {
  // 기존 타이머가 있으면 제거
  if (notification.value.timeout) {
    clearTimeout(notification.value.timeout);
  }
  
  // 알림 정보 설정
  notification.value = {
    show: true,
    type,
    title,
    message,
    timeout: null
  };
  
  // 지정된 시간 후 알림 닫기
  notification.value.timeout = setTimeout(() => {
    closeNotification();
  }, duration) as unknown as number;
  
  // 알림 목록에 추가
  const newNotification = {
    id: 'notification_' + Date.now(),
    title,
    message,
    type,
    time: new Date(),
    read: false
  };
  
  notificationList.value.unshift(newNotification);
  saveNotificationsToStorage();
};

const closeNotification = () => {
  notification.value.show = false;
  if (notification.value.timeout) {
    clearTimeout(notification.value.timeout);
    notification.value.timeout = null;
  }
};

// 비디오 파일 처리 함수 (Blob 데이터 포함)
const processVideoFile = async (file: File) => {
  return new Promise<{ url: string, duration: number, blob: Blob }>((resolve, reject) => {
    try {
      const video = document.createElement('video');
      const url = URL.createObjectURL(file);
      
      video.onloadedmetadata = () => {
        const duration = video.duration; // 비디오 길이 (초)
        resolve({ url, duration, blob: file });
      };
      
      video.onerror = (e) => {
        console.error('Error loading video metadata:', e);
        reject(new Error('Failed to load video metadata'));
      };
      
      video.src = url;
    } catch (error) {
      console.error('Error in processVideoFile:', error);
      reject(error);
    }
  });
};

const uploadVideo = async () => {
  if (!selectedFile.value) return;
  
  try {
    uploading.value = true;
    
    // 파일 처리 및 메타데이터 추출
    const { url, duration, blob } = await processVideoFile(selectedFile.value);
    const fileSize = selectedFile.value.size;
    const title = videoTitle.value.trim() || selectedFile.value.name.split('.')[0];
    const id = `video_${Date.now()}`;
    
    const newVideo = {
      id,
      title,
      url,
      blob,
      size: fileSize,
      uploadDate: new Date(),
      isRefreshed: false,
      duration
    };
    
    // 업로드 진행 시각화 (실제 업로드가 아니라서 가상의 진행률만 표시)
    let progress = 0;
    const progressInterval = setInterval(() => {
      progress += 5;
      uploadProgress.value = Math.min(progress, 99);
      
      if (progress >= 100) {
        clearInterval(progressInterval);
      }
    }, 100);
    
    // 모든 비디오를 videos 배열에 저장합니다 (shorts도 포함)
    // 50초 이하 비디오는 쇼츠로 분류
    if (duration <= 50) {
      // IndexedDB에 저장
      if (dbInitialized.value) {
        await videoDB.saveVideo(newVideo, true);
      }
      
      // 메인 videos 배열에 추가
      videos.value.unshift(newVideo);
      addNotification(`${title}`, '쇼츠가 업로드 되었습니다.');
    } else {
      // IndexedDB에 저장
      if (dbInitialized.value) {
        await videoDB.saveVideo(newVideo, false);
      }
      
      videos.value.unshift(newVideo);
      addNotification(`${title}`, '동영상이 업로드 되었습니다.');
    }
    
    // 메타데이터는 로컬 스토리지에도 백업
    saveVideosToLocalStorage();
    
    // 업로드 완료 처리
    uploadProgress.value = 100;
    setTimeout(() => {
      closeModal();
    }, 500);
    
    videoTitle.value = '';
    selectedFile.value = null;
  } catch (error) {
    console.error('Error uploading video:', error);
    addNotification('업로드 실패', '동영상 처리 중 오류가 발생했습니다.');
  } finally {
    uploading.value = false;
  }
};

// 비디오 삭제 함수
const deleteVideo = async (id: string) => {
  try {
    const videoIndex = videos.value.findIndex(v => v.id === id);
    
    if (videoIndex !== -1) {
      const deletedVideo = videos.value[videoIndex];
      const isShort = deletedVideo.duration && deletedVideo.duration <= 50;
      
      // URL 객체 해제
      if (deletedVideo.url) {
        URL.revokeObjectURL(deletedVideo.url);
      }
      
      // IndexedDB에서 삭제
      if (dbInitialized.value) {
        await videoDB.deleteVideo(id, isShort);
      }
      
      videos.value.splice(videoIndex, 1);
      if (isShort) {
        addNotification('삭제 완료', `'${deletedVideo.title}' 쇼츠가 삭제되었습니다.`);
      } else {
        addNotification('삭제 완료', `'${deletedVideo.title}' 동영상이 삭제되었습니다.`);
      }
    }
    
    // 메타데이터 업데이트
    saveVideosToLocalStorage();
  } catch (error) {
    console.error('비디오 삭제 실패:', error);
    addNotification('삭제 실패', '비디오를 삭제하는 중 오류가 발생했습니다.');
  }
};

// 로컬 스토리지에서 알림 정보 불러오는 함수
const loadNotificationsFromStorage = () => {
  const savedNotifications = localStorage.getItem('notifications');
  if (savedNotifications) {
    try {
      const parsedNotifications = JSON.parse(savedNotifications);
      // 날짜 객체 복원
      notificationList.value = parsedNotifications.map((notification: any) => ({
        ...notification,
        time: new Date(notification.time)
      }));
    } catch (e) {
      console.error('알림 데이터를 불러오는 중 오류가 발생했습니다:', e);
    }
  }
};

// 로컬 스토리지에 알림 정보 저장하는 함수
const saveNotificationsToStorage = () => {
  localStorage.setItem('notifications', JSON.stringify(notificationList.value));
};

// 새 알림 추가
const addNotification = (title: string, message: string) => {
  notificationList.value.unshift({
    id: 'notification_' + Date.now(),
    title,
    message,
    type: 'success',
    time: new Date(),
    read: false
  });
  
  // 최대 10개 알림만 유지
  if (notificationList.value.length > 10) {
    notificationList.value = notificationList.value.slice(0, 10);
  }
  
  saveNotificationsToStorage();
};

// 알림 모두 지우기
const clearAllNotifications = () => {
  notificationList.value = [];
  saveNotificationsToStorage();
};

// 알림 패널 토글 함수
const toggleNotificationPanel = () => {
  showNotificationPanel.value = !showNotificationPanel.value;
};

// 알림 시간 포맷팅 함수
const formatNotificationTime = (date: Date) => {
  const now = new Date();
  const diffTime = Math.abs(now.getTime() - date.getTime());
  const diffMinutes = Math.floor(diffTime / (1000 * 60));
  
  if (diffMinutes < 1) {
    return '방금 전';
  } else if (diffMinutes < 60) {
    return `${diffMinutes}분 전`;
  } else if (diffMinutes < 1440) {
    return `${Math.floor(diffMinutes / 60)}시간 전`;
  } else {
    return `${Math.floor(diffMinutes / 1440)}일 전`;
  }
};

// 업로드 간격 제어를 위한 타임스탬프
let lastSearchTime = 0;

// 비디오 검색 함수
const searchVideos = () => {
  // 연속 실행 방지
  const now = Date.now();
  if (now - lastSearchTime < 300) return;
  lastSearchTime = now;
  
  const query = searchQuery.value.toLowerCase().trim();
  if (!query) {
    isSearchActive.value = false;
    filteredVideos.value = [];
    return;
  }
  
  // 현재 보기에 따라 검색 대상 결정
  const searchTarget = currentView.value === 'shorts' ? shortsVideos.value : videos.value;
  
  // 검색 결과 필터링
  filteredVideos.value = searchTarget.filter(video => {
    return video.title.toLowerCase().includes(query);
  });
  
  isSearchActive.value = true;
  showSearchResults.value = true;
};

// 검색 초기화
const clearSearch = () => {
  searchQuery.value = '';
  isSearchActive.value = false;
  showSearchResults.value = false;
  filteredVideos.value = [];
};

// 검색 결과 선택
const selectSearchResult = (video: any) => {
  // 선택한 비디오 처리 로직
  showSearchResults.value = false;
};

// 검색 페이지 열기
const openSearchPage = () => {
  showSearchPage.value = true;
};

// 검색 페이지 닫기
const closeSearchPage = () => {
  showSearchPage.value = false;
};

// 현재 보기 설정
const setCurrentView = (view: string) => {
  currentView.value = view;
  clearSearch(); // 보기 변경 시 검색 초기화
  // 전체보기로 전환될 때도 패널들 숨기기
  if (view === 'home' || view === 'shorts' || view === 'history' || view === 'all') {
    showNotificationPanel.value = false;
    showCreateMenu.value = false;
    isSearchActive.value = false;
  }
};

const displayVideos = computed(() => {
  if (isSearchActive.value && searchQuery.value.trim() !== '') {
    return filteredVideos.value;
  }
  // 홈 화면에는 일반 동영상만 표시 (쇼츠는 제외)
  return videos.value.filter(video => !video.duration || video.duration > 50);
});

const formatDuration = (duration: number): string => {
  if (!duration) return '00:00:00';
  
  const hours = Math.floor(duration / 3600);
  const minutes = Math.floor((duration % 3600) / 60);
  const seconds = Math.floor(duration % 60);
  
  return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
};

// 쇼츠 비디오 재생/중지 토글 함수
const togglePlay = (event: Event) => {
  const video = event.target as HTMLVideoElement;
  if (video.paused) {
    video.play();
  } else {
    video.pause();
  }
};

// 메뉴 열기 함수
const openShortsMenu = (videoId: string) => {
  if (activeMenuId.value === videoId) {
    activeMenuId.value = null;
  } else {
    activeMenuId.value = videoId;
  }
};

// 삭제 확인 모달 열기
const confirmDeleteShorts = (videoId: string) => {
  deletingVideoId.value = videoId;
  showDeleteModal.value = true;
  activeMenuId.value = null; // 메뉴 닫기
};

// 삭제 취소
const cancelDelete = () => {
  showDeleteModal.value = false;
  deletingVideoId.value = null;
};

// 삭제 확인
const confirmDelete = () => {
  if (deletingVideoId.value) {
    deleteVideo(deletingVideoId.value);
    showDeleteModal.value = false;
    deletingVideoId.value = null;
  }
};

// 시청기록 로드
const loadHistoryFromIndexedDB = async () => {
  try {
    if (!dbInitialized.value) return;
    
    try {
      const historyData = await videoDB.getHistory();
      watchHistory.value = historyData.map(item => ({
        ...item,
        watchedAt: new Date(item.watchedAt),
        video: {
          ...item.video,
          uploadDate: new Date(item.video.uploadDate),
          url: item.video.blob ? URL.createObjectURL(item.video.blob) : null,
          isRefreshed: !item.video.blob
        }
      })).sort((a, b) => b.watchedAt.getTime() - a.watchedAt.getTime()); // 최신순 정렬
      
      console.log('시청기록 로드 완료:', watchHistory.value.length);
    } catch (error) {
      console.error('시청기록 로드 실패:', error);
      // 오류 발생 시 로컬 스토리지 사용
      loadHistoryFromLocalStorage();
    }
  } catch (error) {
    console.error('시청기록 로드 실패:', error);
    loadHistoryFromLocalStorage();
  }
};

// 로컬 스토리지에서 시청기록 로드
const loadHistoryFromLocalStorage = () => {
  const storedHistory = localStorage.getItem('watchHistory');
  if (storedHistory) {
    try {
      const parsedHistory = JSON.parse(storedHistory);
      watchHistory.value = parsedHistory.map((item: any) => ({
        ...item,
        watchedAt: new Date(item.watchedAt),
        video: {
          ...item.video,
          uploadDate: new Date(item.video.uploadDate),
          url: null, // 새로고침 후에는 URL을 null로 설정
          isRefreshed: true
        }
      }));
    } catch (e) {
      console.error('시청기록 파싱 실패:', e);
    }
  }
};

// 시청기록 로컬 스토리지에 저장
const saveHistoryToLocalStorage = () => {
  const historyToSave = watchHistory.value.map(item => {
    const { video, ...rest } = item;
    const { url, blob, isRefreshed, ...videoRest } = video;
    return {
      ...rest,
      video: videoRest
    };
  });
  
  localStorage.setItem('watchHistory', JSON.stringify(historyToSave));
};

// 비디오 상세보기
const openVideoDetail = (video: any) => {
  selectedVideo.value = video;
  showVideoDetailModal.value = true;
  
  // 시청기록에 추가
  addToHistory(video);
};

// 비디오 상세보기 닫기
const closeVideoDetail = () => {
  showVideoDetailModal.value = false;
};

// 시청기록에 추가
const addToHistory = async (video: any) => {
  try {
    // 비디오가 이미 기록되어 있더라도 항상 새 기록 추가 (같은 비디오를 여러번 볼 수 있기 때문)
    if (dbInitialized.value) {
      await videoDB.addToHistory(video);
    }
    
    // 메모리에 추가
    const historyItem = {
      video,
      watchedAt: new Date(),
      isShort: video.duration <= 50
    };
    
    watchHistory.value.unshift(historyItem);
    
    // 로컬 스토리지 백업
    saveHistoryToLocalStorage();
    
    console.log('시청기록에 추가됨:', video.title);
  } catch (error) {
    console.error('시청기록 추가 실패:', error);
  }
};

// 시청기록에서 제거
const removeFromHistory = async (id: number | undefined) => {
  if (id === undefined) return;
  
  try {
    const index = watchHistory.value.findIndex(h => h.id === id);
    if (index !== -1) {
      // IndexedDB에서 삭제
      if (dbInitialized.value) {
        await videoDB.removeFromHistory(id);
      }
      
      // 메모리에서 삭제
      watchHistory.value.splice(index, 1);
      
      // 로컬 스토리지 백업
      saveHistoryToLocalStorage();
      
      showNotification('success', '기록 삭제', '시청기록에서 삭제되었습니다.');
    }
  } catch (error) {
    console.error('시청기록 삭제 실패:', error);
    showNotification('error', '삭제 실패', '시청기록 삭제 중 오류가 발생했습니다.');
  }
};

// 비디오 카드 클릭 이벤트 처리를 위한 함수 수정
const handleVideoClick = (video: any) => {
  openVideoDetail(video);
};

// 시청 기록 비우기 확인 모달 열기
const confirmClearHistory = () => {
  showClearHistoryModal.value = true;
};

// 시청 기록 비우기 취소
const cancelClearHistory = () => {
  showClearHistoryModal.value = false;
};

// 모든 시청 기록 삭제
const clearAllHistory = async () => {
  try {
    if (dbInitialized.value) {
      await videoDB.clearHistory();
    }
    
    watchHistory.value = [];
    saveHistoryToLocalStorage();
    
    showNotification('success', '시청 기록 삭제', '모든 시청 기록이 삭제되었습니다.');
    showClearHistoryModal.value = false;
  } catch (error) {
    console.error('시청 기록 삭제 실패:', error);
    showNotification('error', '삭제 실패', '시청 기록 삭제 중 오류가 발생했습니다.');
  }
};

// 비디오 상세 모달에서 비디오 변경 함수
const changeVideo = (video: any) => {
  selectedVideo.value = video;
  showVideoDetailModal.value = true;
};

// 비디오 상세 모달에서 비디오 진행 상태 업데이트 함수
const updateVideoProgress = (event: Event) => {
  // 여기에 비디오 진행 상태 업데이트 로직을 추가할 수 있습니다.
};

// 비디오 상세 모달에서 비디오 종료 처리 함수
const handleVideoEnded = () => {
  // 여기에 비디오 종료 처리 로직을 추가할 수 있습니다.
};

// 비디오 상세 모달에서 추천 비디오 설정 함수
const recommendedVideos = ref<any[]>([]);

// 추천 비디오 설정 로직을 구현해야 합니다.

// 계산된 속성들
// ... existing code ...

// 쇼츠 비디오 (50초 이하의 비디오)
const shortsVideos = computed(() => {
  return videos.value.filter(video => {
    return video.duration && video.duration <= 50;
  });
});

// 일반 비디오 (50초 초과 비디오)
const normalVideos = computed(() => {
  return videos.value.filter(video => {
    return !video.duration || video.duration > 50;
  });
});

// 전체 비디오 (일반 + 쇼츠)
const allVideos = computed(() => {
  return videos.value;
});

// ... existing code ...
</script>

<style>
.app {
  font-family: 'Avenir', Helvetica, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-align: center;
  color: #2c3e50;
  margin-top: 60px;
  display: flex;
}

.sidebar {
  position: fixed;
  top: 60px;
  left: 0;
  width: 120px;
  height: 100vh;
  background-color: white;
  z-index: 90;
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  padding-top: 10px;
}

.sidebar-item {
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: flex-start;
  width: 100%;
  height: 40px;
  cursor: pointer;
  padding-left: 16px;
}

.sidebar-item:hover, .sidebar-item.active {
  background-color: #f0f0f0;
}

.sidebar-item.active .home-icon {
  color: #000000;
}

.sidebar-item.active .sidebar-text {
  font-weight: bold;
}

.sidebar-icon {
  width: 24px;
  height: 24px;
  margin-right: 16px;
}

.home-icon {
  width: 24px;
  height: 24px;
  fill: transparent;
  color: #606060;
}

.sidebar-text {
  font-size: 14px;
  color: #030303;
}

.menu-bar {
  background-color: white;
  width: 100%;
  position: fixed;
  top: 0;
  left: 0;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  z-index: 100;
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 5px 25px;
  height: 60px;
}

.logo-container {
  display: flex;
  align-items: center;
  flex: 1;
  justify-content: flex-start;
}

.search-container {
  flex: 2;
  display: flex;
  justify-content: center;
  align-items: center;
  max-width: 640px;
}

.search-form {
  display: flex;
  width: 100%;
  max-width: 540px;
  position: relative;
}

.search-input {
  width: 100%;
  height: 38px;
  padding: 0 16px;
  font-size: 16px;
  border: 1px solid #ccc;
  border-radius: 2px 0 0 2px;
  outline: none;
}

.search-input:focus {
  border-color: #1c62b9;
  box-shadow: 0 0 0 1px #1c62b9;
}

.search-button {
  width: 64px;
  height: 40px;
  background-color: #f8f8f8;
  border: 1px solid #ccc;
  border-left: none;
  border-radius: 0 2px 2px 0;
  cursor: pointer;
  display: flex;
  justify-content: center;
  align-items: center;
}

.search-button:hover {
  background-color: #f0f0f0;
}

.search-icon {
  width: 24px;
  height: 24px;
  fill: #606060;
}

.action-buttons {
  display: flex;
  justify-content: flex-end;
  align-items: center;
  flex: 1;
  gap: 12px;
  margin-right: 30px;
}

.create-dropdown {
  position: relative;
}

.dropdown-menu {
  position: absolute;
  top: 100%;
  right: 0;
  width: 200px;
  background: white;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
  margin-top: 8px;
  z-index: 150;
  overflow: hidden;
}

.dropdown-item {
  display: flex;
  align-items: center;
  padding: 12px 16px;
  cursor: pointer;
}

.dropdown-item:hover {
  background-color: #f0f0f0;
}

.dropdown-item svg {
  width: 20px;
  height: 20px;
  margin-right: 12px;
  fill: #606060;
}

.dropdown-item span {
  font-size: 14px;
  color: #030303;
}

.create-button {
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: #f1f1f1;
  border: none;
  border-radius: 25px;
  padding: 8px 16px;
  cursor: pointer;
  font-size: 14px;
  font-weight: 500;
  color: #0f0f0f;
  height: 36px;
  min-width: 90px;
}

.create-button:hover {
  background-color: #e5e5e5;
}

.plus-icon {
  font-size: 18px;
  margin-right: 5px;
  font-weight: 300;
  line-height: 1;
}

.create-text {
  line-height: 1;
}

.notification-wrapper {
  position: relative;
  margin-right: 10px;
}

.notification-badge {
  position: absolute;
  top: -5px;
  right: -5px;
  background-color: #FF0000;
  color: white;
  border-radius: 50%;
  width: 18px;
  height: 18px;
  font-size: 12px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: bold;
}

.notification-button {
  background-color: transparent;
  border: none;
  cursor: pointer;
  width: 40px;
  height: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
}

.notification-button:hover {
  background-color: #f0f0f0;
}

.bell-icon {
  width: 24px;
  height: 24px;
  fill: #030303;
}

.youtube-logo {
  display: flex;
  align-items: center;
  cursor: pointer;
}

.play-button {
  width: 40px;
  height: 26px;
  background-color: #FF0000;
  border-radius: 7px;
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
}

.play-button:before {
  content: "";
  width: 0;
  height: 0;
  border-style: solid;
  border-width: 7px 0 7px 10px;
  border-color: transparent transparent transparent white;
  position: absolute;
}

.youtube-text {
  font-weight: bold;
  font-size: 20px;
  margin-left: 3px;
  font-family: 'Arial', sans-serif;
  letter-spacing: -1px;
  color: #000;
}

.kr {
  font-size: 10px;
  vertical-align: super;
  margin-left: 2px;
  font-weight: normal;
}

.menu-bar li {
  padding: 18px 22px;
}

.menu-bar a {
  text-decoration: none;
  color: #333;
  font-weight: bold;
}

header {
  margin-bottom: 30px;
  margin-top: 30px;
}

header h1 {
  color: #FF0000;
  font-size: 32px;
  font-family: 'Arial', sans-serif;
  letter-spacing: -1px;
  margin-top: 80px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.favicon-icon {
  width: 36px;
  height: 25px;
  background-color: #FF0000;
  border-radius: 7px;
  margin-right: 10px;
  position: relative;
  display: inline-flex;
  justify-content: center;
  align-items: center;
}

.favicon-icon:before {
  content: "";
  width: 0;
  height: 0;
  border-style: solid;
  border-width: 6px 0 6px 9px;
  border-color: transparent transparent transparent white;
  position: absolute;
}

footer {
  margin-top: 30px;
  font-size: 0.8em;
  color: #666;
}

/* 모달 스타일 */
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.5);
  z-index: 200;
}

.upload-modal {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 100%;
  max-width: 600px;
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
  z-index: 201;
  overflow: hidden;
}

.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 16px 24px;
  border-bottom: 1px solid #e5e5e5;
}

.modal-header h2 {
  font-size: 18px;
  font-weight: 500;
  margin: 0;
}

.close-button {
  background: transparent;
  border: none;
  font-size: 24px;
  cursor: pointer;
  color: #606060;
}

.modal-content {
  padding: 24px;
}

.upload-area {
  border: 2px dashed #ccc;
  border-radius: 8px;
  padding: 40px 20px;
  text-align: center;
  cursor: pointer;
  margin-bottom: 20px;
}

.upload-area:hover {
  border-color: #1c62b9;
  background-color: #f8f8f8;
}

.upload-cloud-icon {
  width: 48px;
  height: 48px;
  fill: #606060;
  margin-bottom: 8px;
}

.upload-preview {
  background-color: #f8f8f8;
  border-radius: 8px;
  padding: 16px;
  margin-top: 20px;
}

.file-info {
  display: flex;
  justify-content: space-between;
  margin-bottom: 16px;
}

.file-name {
  font-weight: 500;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.upload-actions {
  display: flex;
  justify-content: flex-end;
  gap: 12px;
}

.cancel-button {
  padding: 8px 16px;
  background-color: #f1f1f1;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.upload-button {
  padding: 8px 16px;
  background-color: #1c62b9;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.upload-progress {
  margin-top: 20px;
}

.progress-bar {
  height: 8px;
  background-color: #f1f1f1;
  border-radius: 4px;
  overflow: hidden;
  margin-bottom: 8px;
}

.progress-fill {
  height: 100%;
  background-color: #1c62b9;
  transition: width 0.3s ease;
}

.progress-text {
  text-align: right;
  font-size: 12px;
  color: #606060;
}

/* Main content styles */
.main-content {
  margin-left: 120px;
  width: calc(100% - 120px);
  padding: 20px;
  text-align: left;
}

.videos-container {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  gap: 20px;
  margin-top: 20px;
}

.no-videos {
  grid-column: 1 / -1;
  text-align: center;
  padding: 50px 0;
  color: #606060;
}

.video-card {
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 1px 3px rgba(0,0,0,0.1);
  background-color: white;
  transition: transform 0.2s;
  cursor: pointer;
}

.video-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.video-thumbnail {
  position: relative;
  width: 100%;
  height: 0;
  padding-bottom: 56.25%; /* 16:9 aspect ratio */
  background-color: #f9f9f9;
  overflow: hidden;
}

.video-thumbnail video {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.thumbnail-placeholder {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: #f5f5f5;
}

.refresh-notice {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 16px;
  text-align: center;
}

.refresh-icon {
  width: 40px;
  height: 40px;
  fill: #606060;
  margin-bottom: 12px;
}

.refresh-text {
  color: #606060;
  font-size: 14px;
  line-height: 1.4;
}

.video-placeholder-icon {
  width: 48px;
  height: 48px;
  fill: #606060;
}

.video-info {
  padding: 12px;
}

.video-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 6px;
}

.video-delete-button {
  position: absolute;
  top: 8px;
  right: 8px;
  width: 32px;
  height: 32px;
  background-color: rgba(0, 0, 0, 0.6);
  border: none;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  z-index: 5;
  opacity: 0;
  transition: opacity 0.2s;
}

.video-card:hover .video-delete-button {
  opacity: 1;
}

.video-delete-button:hover {
  background-color: rgba(0, 0, 0, 0.8);
}

.trash-icon {
  width: 18px;
  height: 18px;
  fill: white;
}

.video-title {
  margin: 0;
  font-size: 16px;
  font-weight: 500;
  color: #030303;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  flex: 1;
  margin-right: 8px;
}

.video-details {
  display: flex;
  justify-content: space-between;
  margin: 6px 0 0;
  font-size: 12px;
  color: #606060;
}

.video-size {
  color: #606060;
}

/* 비디오 상세 폼 */
.video-details-form {
  margin-top: 20px;
  margin-bottom: 20px;
}

.form-group {
  margin-bottom: 16px;
}

.form-group label {
  display: block;
  margin-bottom: 8px;
  font-weight: 500;
  color: #030303;
  text-align: left;
}

.form-group input {
  width: 100%;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
  font-size: 14px;
}

/* 알림 창 스타일 */
.notification-container {
  position: fixed;
  top: 20px;
  right: 20px;
  z-index: 1000;
}

.notification {
  display: flex;
  align-items: flex-start;
  width: 320px;
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  overflow: hidden;
  padding: 16px;
  animation: slide-in 0.3s ease-out;
}

@keyframes slide-in {
  from {
    transform: translateX(100%);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}

.notification.success {
  border-left: 4px solid #4CAF50;
}

.notification.error {
  border-left: 4px solid #F44336;
}

.notification-icon {
  margin-right: 12px;
  flex-shrink: 0;
}

.success-icon {
  width: 24px;
  height: 24px;
  fill: #4CAF50;
}

.error-icon {
  width: 24px;
  height: 24px;
  fill: #F44336;
}

.notification-content {
  flex: 1;
}

.notification-title {
  font-weight: 500;
  margin-bottom: 4px;
  color: #333;
}

.notification-message {
  font-size: 14px;
  color: #666;
}

.notification-close {
  background: transparent;
  border: none;
  cursor: pointer;
  padding: 0;
  width: 24px;
  height: 24px;
  display: flex;
  align-items: center;
  justify-content: center;
  margin-left: 8px;
  opacity: 0.5;
  transition: opacity 0.2s;
}

.notification-close:hover {
  opacity: 1;
}

.close-icon {
  width: 16px;
  height: 16px;
  fill: #666;
}

/* 알림 패널 스타일 */
.notification-panel {
  position: absolute;
  top: 100%;
  right: 0;
  width: 320px;
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  margin-top: 8px;
  z-index: 200;
  overflow: hidden;
  max-height: 500px;
  display: flex;
  flex-direction: column;
}

.notification-panel-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 12px 16px;
  border-bottom: 1px solid #e5e5e5;
}

.notification-panel-header h3 {
  margin: 0;
  font-size: 16px;
  font-weight: 500;
}

.clear-all {
  background: none;
  border: none;
  color: #065fd4;
  font-size: 14px;
  cursor: pointer;
  padding: 4px 8px;
}

.clear-all:hover {
  background-color: #f0f0f0;
  border-radius: 4px;
}

.notification-panel-content {
  overflow-y: auto;
  max-height: 450px;
}

.no-notifications {
  padding: 32px 16px;
  text-align: center;
  color: #606060;
  font-size: 14px;
}

.notification-item {
  display: flex;
  padding: 12px 16px;
  border-bottom: 1px solid #e5e5e5;
  cursor: pointer;
}

.notification-item:hover {
  background-color: #f9f9f9;
}

.notification-item-icon {
  margin-right: 12px;
  flex-shrink: 0;
}

.notification-item-content {
  flex: 1;
}

.notification-item-title {
  font-weight: 500;
  margin-bottom: 4px;
  color: #030303;
}

.notification-item-message {
  font-size: 14px;
  color: #606060;
  margin-bottom: 4px;
}

.notification-item-time {
  font-size: 12px;
  color: #909090;
}

/* 검색 결과 헤더 스타일 */
header h2 {
  font-size: 18px;
  font-weight: 500;
  color: #030303;
  margin: 16px 0;
  padding-left: 10px;
}

.search-clear-button {
  position: absolute;
  right: 72px;
  top: 50%;
  transform: translateY(-50%);
  background: transparent;
  border: none;
  height: 40px;
  width: 40px;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  opacity: 0.6;
}

.search-clear-button:hover {
  opacity: 1;
}

.clear-icon {
  width: 18px;
  height: 18px;
  fill: #606060;
}

.search-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin: 16px 0;
  padding: 0 10px;
}

.search-header h2 {
  font-size: 18px;
  font-weight: 500;
  color: #030303;
  margin: 0;
}

.reset-search-button {
  background-color: #f0f0f0;
  border: none;
  border-radius: 18px;
  padding: 6px 12px;
  display: flex;
  align-items: center;
  cursor: pointer;
  font-size: 14px;
  color: #606060;
  transition: background-color 0.2s;
}

.reset-search-button:hover {
  background-color: #e0e0e0;
}

.reset-icon {
  width: 16px;
  height: 16px;
  fill: #606060;
  margin-right: 4px;
}

/* 검색 결과 드롭다운 스타일 */
.search-results-dropdown {
  position: absolute;
  top: 40px;
  left: 0;
  width: 100%;
  background: white;
  border-radius: 0 0 4px 4px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
  z-index: 150;
  max-height: 400px;
  overflow-y: auto;
}

.no-results {
  padding: 16px;
  text-align: center;
  color: #606060;
}

.search-results-list {
  display: flex;
  flex-direction: column;
}

.search-result-item {
  display: flex;
  align-items: center;
  padding: 8px 16px;
  cursor: pointer;
  border-bottom: 1px solid #f0f0f0;
}

.search-result-item:hover {
  background-color: #f8f8f8;
}

.search-result-thumbnail {
  width: 120px;
  height: 68px;
  margin-right: 12px;
  background-color: #f0f0f0;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 4px;
  overflow: hidden;
}

.search-result-thumbnail video {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.search-result-info {
  flex: 1;
  text-align: left;
}

.search-result-title {
  font-size: 14px;
  font-weight: 500;
  color: #030303;
  margin-bottom: 4px;
}

.search-result-meta {
  font-size: 12px;
  color: #606060;
}

.search-clear-button {
  position: absolute;
  right: 70px;
  top: 50%;
  transform: translateY(-50%);
  background: transparent;
  border: none;
  cursor: pointer;
  padding: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 24px;
  height: 24px;
}

.search-clear-button .clear-icon {
  width: 18px;
  height: 18px;
  fill: #606060;
}

/* 쇼츠 컨테이너 스타일 */
.shorts-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 20px 0;
  width: 100%;
  min-height: calc(100vh - 130px);
  background-color: #f9f9f9;
  overflow-y: auto;
}

.shorts-no-videos {
  color: #333;
  background-color: transparent;
}

.shorts-list {
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 100%;
  gap: 20px;
  max-width: 420px;
  margin: 0 auto;
}

.shorts-card {
  background-color: #fff;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  width: 320px;
  max-width: 100%;
  display: flex;
  flex-direction: column;
  margin-bottom: 20px;
  position: relative;
}

.shorts-thumbnail {
  position: relative;
  width: 100%;
  padding-top: 177.78%; /* 9:16 비율 */
  background-color: #000;
  overflow: hidden;
}

.shorts-thumbnail video,
.shorts-thumbnail .thumbnail-placeholder {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
  display: flex;
  justify-content: center;
  align-items: center;
}

.shorts-thumbnail video {
  cursor: pointer;
}

.shorts-delete-button {
  z-index: 20;
  top: 15px;
}

/* 쇼츠 스타일 추가 */
.shorts-menu-button {
  position: absolute;
  top: 12px;
  right: 12px;
  width: 32px;
  height: 32px;
  background-color: rgba(0, 0, 0, 0.6);
  border: none;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  z-index: 20;
}

.shorts-menu-button:hover {
  background-color: rgba(0, 0, 0, 0.8);
}

.menu-icon {
  width: 20px;
  height: 20px;
  fill: white;
}

.shorts-menu-dropdown {
  position: absolute;
  top: 50px;
  right: 12px;
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
  overflow: hidden;
  z-index: 30;
  min-width: 120px;
}

.menu-item {
  display: flex;
  align-items: center;
  padding: 10px 16px;
  cursor: pointer;
}

.menu-item:hover {
  background-color: #f0f0f0;
}

.delete-icon {
  width: 20px;
  height: 20px;
  fill: #606060;
  margin-right: 12px;
}

.menu-item span {
  font-size: 14px;
  color: #030303;
}

/* 삭제 모달 스타일 */
.delete-modal {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
  z-index: 210;
  width: 100%;
  max-width: 400px;
}

.delete-actions {
  display: flex;
  justify-content: flex-end;
  gap: 12px;
  margin-top: 20px;
}

.delete-button {
  padding: 8px 16px;
  background-color: #cc0000;
  color: white;
  border: none;
  border-radius: 2px;
  cursor: pointer;
  font-weight: 500;
}

.delete-button:hover {
  background-color: #b00000;
}

.shorts-controls {
  position: absolute;
  bottom: 15px;
  right: 8px;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 15px;
  padding: 0;
  z-index: 10;
}

.shorts-like,
.shorts-dislike,
.shorts-comment,
.shorts-share {
  display: flex;
  flex-direction: column;
  align-items: center;
  color: white;
  font-size: 11px;
  gap: 4px;
  cursor: pointer;
}

.like-icon,
.dislike-icon,
.comment-icon,
.share-icon {
  width: 20px;
  height: 20px;
  fill: white;
}

.shorts-info {
  padding: 12px;
  flex-grow: 1;
  background-color: #ffffff;
  border-top: 1px solid #f0f0f0;
}

.shorts-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 4px;
}

.shorts-title {
  font-size: 14px;
  font-weight: 500;
  margin: 0;
  line-height: 1.3;
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  color: #030303;
}

.shorts-details {
  font-size: 12px;
  color: #606060;
  margin: 4px 0 0;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.shorts-channel {
  font-weight: 500;
}

.shorts-duration {
  background-color: rgba(0, 0, 0, 0.7);
  color: white;
  padding: 1px 4px;
  border-radius: 2px;
  font-size: 11px;
}

.shorts-icon {
  width: 24px;
  height: 24px;
  fill: currentColor;
}

.view-header {
  margin: 20px 0;
  padding: 0 10px;
}

.view-header h2 {
  font-size: 20px;
  font-weight: 500;
  margin: 0 0 8px 0;
}

.view-header p {
  font-size: 14px;
  color: #606060;
  margin: 0;
}

/* 시청기록 페이지 스타일 */
.history-icon {
  width: 24px;
  height: 24px;
  fill: #606060;
}

.sidebar-item.active .history-icon {
  fill: #FF0000;
}

.history-item {
  margin-bottom: 16px;
  border-bottom: 1px solid #f0f0f0;
  padding-bottom: 16px;
}

.watched-date {
  font-style: italic;
  color: #606060;
}

.remove-history-button {
  margin-top: 8px;
  background: none;
  border: none;
  color: #606060;
  font-size: 12px;
  padding: 4px 8px;
  border-radius: 2px;
  cursor: pointer;
  display: flex;
  align-items: center;
  transition: background-color 0.2s;
  max-width: fit-content;
}

.remove-history-button:hover {
  background-color: #f0f0f0;
}

.remove-icon {
  width: 14px;
  height: 14px;
  fill: #606060;
  margin-right: 4px;
}

/* 비디오 상세 모달 */
.video-detail-modal {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 90%;
  max-width: 1000px;
  max-height: 90vh;
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
  z-index: 201;
  overflow: hidden;
  display: flex;
  flex-direction: column;
}

.video-player {
  width: 100%;
  background-color: #000;
  position: relative;
  padding-top: 56.25%; /* 16:9 비율 */
}

.video-player video {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

.video-detail-info {
  padding: 16px;
  border-bottom: 1px solid #e5e5e5;
}

.video-detail-top {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 8px;
}

.video-detail-title {
  font-size: 18px;
  font-weight: 500;
  flex: 1;
}

.video-detail-views {
  font-size: 14px;
  color: #606060;
}

.video-detail-meta {
  display: flex;
  justify-content: space-between;
  font-size: 14px;
  color: #606060;
  margin-bottom: 12px;
}

.video-recommendations {
  padding: 16px;
  overflow-y: auto;
  max-height: 300px;
}

.video-recommendations h3 {
  font-size: 16px;
  font-weight: 500;
  margin: 0 0 12px 0;
}

.recommended-videos {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.recommended-video {
  display: flex;
  cursor: pointer;
  padding: 8px;
  border-radius: 4px;
  transition: background-color 0.2s;
}

.recommended-video:hover {
  background-color: #f0f0f0;
}

.recommended-thumbnail {
  width: 168px;
  height: 94px;
  border-radius: 4px;
  overflow: hidden;
  margin-right: 8px;
  background-color: #f5f5f5;
  position: relative;
  flex-shrink: 0;
}

.recommended-thumbnail video,
.recommended-thumbnail .thumbnail-placeholder {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.recommended-duration {
  position: absolute;
  bottom: 4px;
  right: 4px;
  background-color: rgba(0, 0, 0, 0.8);
  color: white;
  font-size: 12px;
  padding: 1px 4px;
  border-radius: 2px;
}

.recommended-info {
  flex: 1;
  display: flex;
  flex-direction: column;
}

.recommended-title {
  font-size: 14px;
  font-weight: 500;
  margin-bottom: 4px;
  color: #030303;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
}

.recommended-meta {
  font-size: 12px;
  color: #606060;
}

/* 개선된 비디오 카드 스타일 */
.videos-container .video-card {
  transition: all 0.3s ease;
}

.videos-container .video-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 5px 15px rgba(0,0,0,0.1);
}

/* 시청 기록 페이지 스타일 */
.view-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.clear-history-button {
  background-color: #f1f1f1;
  border: none;
  border-radius: 25px;
  padding: 8px 16px;
  cursor: pointer;
  font-size: 14px;
  font-weight: 500;
  color: #0f0f0f;
  height: 36px;
  display: flex;
  align-items: center;
  transition: background-color 0.2s;
}

.clear-history-button:hover {
  background-color: #e5e5e5;
}

.delete-all-icon {
  width: 20px;
  height: 20px;
  fill: #606060;
  margin-right: 8px;
}

/* 전체보기 컨테이너 스타일 */
.all-videos-container {
  width: 100%;
  padding: 20px;
}

.all-videos-section, .all-shorts-section {
  margin-bottom: 40px;
  width: 100%;
}

.section-title {
  font-size: 20px;
  font-weight: 500;
  margin-bottom: 16px;
  color: #030303;
  padding-left: 8px;
  border-left: 4px solid #ff0000;
}

.all-videos-grid, .all-shorts-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  gap: 20px;
  width: 100%;
}

/* 레이아웃 반응형 처리 */
@media (max-width: 1200px) {
  .all-videos-grid, .all-shorts-grid {
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  }
}

@media (max-width: 768px) {
  .all-videos-grid, .all-shorts-grid {
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  }
  
  .section-title {
    font-size: 18px;
  }
}
</style> 