<template>
  <div class="app">
    <div class="sidebar">
      <div class="sidebar-item" :class="{ 'active': currentView === 'home' }" @click="setCurrentView('home')">
        <div class="sidebar-icon">
          <svg viewBox="0 0 24 24" class="home-icon">
            <path d="M12 4 5 10v10h14V10L12 4z" fill="none" stroke="currentColor" stroke-width="1.5"></path>
            <path d="M9 14v6 M15 14v6" stroke="currentColor" stroke-width="1.5"></path>
          </svg>
        </div>
        <div class="sidebar-text">홈</div>
      </div>
      
      <div class="sidebar-item" :class="{ 'active': currentView === 'shorts' }" @click="setCurrentView('shorts')">
        <div class="sidebar-icon">
          <svg viewBox="0 0 24 24" class="shorts-icon">
            <path d="M10 14.65v-5.3L15 12l-5 2.65zm7.77-4.33c-.77-.32-1.2-.5-1.2-.5L18 9.06c1.84-.96 2.53-3.23 1.56-5.06s-3.24-2.53-5.07-1.56L6 6.94c-1.29.68-2.07 2.04-2 3.49.07 1.42.93 2.67 2.22 3.25.03.01 1.2.5 1.2.5L6 14.93c-1.83.97-2.53 3.24-1.56 5.07.97 1.83 3.24 2.53 5.07 1.56l8.5-4.5c1.29-.68 2.06-2.04 1.99-3.49-.07-1.42-.94-2.68-2.23-3.25zm-.23 5.86l-8.5 4.5c-1.34.71-3.01.2-3.72-1.14-.71-1.34-.2-3.01 1.14-3.72l2.04-1.08v-1.21l-.69-.28-1.11-.46c-.99-.41-1.65-1.35-1.7-2.41-.05-1.06.52-2.06 1.46-2.56l8.5-4.5c1.34-.71 3.01-.2 3.72 1.14.71 1.34.2 3.01-1.14 3.72L15.5 9.26v1.21l1.8.74c.99.41 1.65 1.35 1.7 2.41.05 1.06-.52 2.06-1.46 2.56z"></path>
          </svg>
        </div>
        <div class="sidebar-text">쇼츠</div>
      </div>
      
      <div class="sidebar-item" :class="{ 'active': currentView === 'subscriptions' }" @click="setCurrentView('subscriptions')">
        <div class="sidebar-icon">
          <svg viewBox="0 0 24 24" class="subscriptions-icon">
            <path d="M20 8H4V6h16v2zm-2-6H6v2h12V2zm4 10v8c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2v-8c0-1.1.9-2 2-2h16c1.1 0 2 .9 2 2zm-6 4l-6-3.27v6.53L16 16z"/>
          </svg>
        </div>
        <div class="sidebar-text">구독</div>
      </div>
      
      <div class="sidebar-item" :class="{ 'active': currentView === 'history' }" @click="setCurrentView('history')">
        <div class="sidebar-icon">
          <svg viewBox="0 0 24 24" class="history-icon">
            <path d="M13 3c-4.97 0-9 4.03-9 9H1l3.89 3.89.07.14L9 12H6c0-3.87 3.13-7 7-7s7 3.13 7 7-3.13 7-7 7c-1.93 0-3.68-.79-4.94-2.06l-1.42 1.42C8.27 19.99 10.51 21 13 21c4.97 0 9-4.03 9-9s-4.03-9-9-9zm-1 5v5l4.28 2.54.72-1.21-3.5-2.08V8H12z"/>
          </svg>
        </div>
        <div class="sidebar-text">시청 기록</div>
      </div>
      
      <div class="sidebar-item" :class="{ 'active': currentView === 'watchlater' }" @click="setCurrentView('watchlater')">
        <div class="sidebar-icon">
          <svg viewBox="0 0 24 24" class="watchlater-icon">
            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm.5-13H11v6l5.25 3.15.75-1.23-4.5-2.67z"/>
          </svg>
        </div>
        <div class="sidebar-text">나중에 볼 동영상</div>
      </div>
    </div>
    
    <nav class="menu-bar">
      <div class="logo-container">
        <div class="youtube-logo">
          <div class="play-button"></div>
          <div class="youtube-text">YouTube<span class="kr">KR</span></div>
        </div>
      </div>
      
      <div class="search-container">
        <form class="search-form" @submit.prevent="searchVideos">
          <input 
            type="text" 
            placeholder="검색" 
            class="search-input" 
            v-model="searchQuery" 
            @focus="openSearchPage"
            readonly
          >
          <button type="submit" class="search-button">
            <svg viewBox="0 0 24 24" class="search-icon">
              <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"></path>
            </svg>
          </button>
          <button 
            v-if="searchQuery.trim()" 
            type="button" 
            class="search-clear-button" 
            @click="clearSearch"
            title="검색 초기화"
          >
            <svg viewBox="0 0 24 24" class="clear-icon">
              <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"></path>
            </svg>
          </button>
          
          <!-- 검색 결과 드롭다운 -->
          <div class="search-results-dropdown" v-if="searchQuery.trim() && showSearchResults">
            <div v-if="filteredVideos.length === 0" class="no-results">
              '{{ searchQuery }}'에 대한 결과가 없습니다
            </div>
            <div v-else class="search-results-list">
              <div 
                v-for="(video, index) in filteredVideos" 
                :key="index" 
                class="search-result-item"
                @click="selectSearchResult(video)"
              >
                <div class="search-result-thumbnail">
                  <video :src="video.url" v-if="video.url && !video.isRefreshed"></video>
                  <div class="thumbnail-placeholder" v-else>
                    <svg viewBox="0 0 24 24" class="video-placeholder-icon">
                      <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 14.5v-9l6 4.5-6 4.5z"></path>
                    </svg>
                  </div>
                </div>
                <div class="search-result-info">
                  <div class="search-result-title">{{ video.title }}</div>
                  <div class="search-result-meta">{{ formatDate(video.uploadDate) }} • {{ formatFileSize(video.size) }}</div>
                </div>
              </div>
            </div>
          </div>
        </form>
      </div>
      
      <div class="action-buttons">
        <div class="create-dropdown">
          <button class="create-button" @click="toggleCreateMenu">
            <span class="plus-icon">+</span>
            <span class="create-text">만들기</span>
          </button>
          <div class="dropdown-menu" v-if="showCreateMenu">
            <div class="dropdown-item" @click="openUploadModal">
              <svg viewBox="0 0 24 24" class="upload-icon">
                <path d="M14 13l-4 5V3h-2v15l4-5v3h2v-3z"/>
                <path d="M18 9h-3v2h3v9H6v-9h3V9H6c-1.1 0-2 .9-2 2v9c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2v-9c0-1.1-.9-2-2-2z"/>
              </svg>
              <span>동영상 업로드</span>
            </div>
          </div>
        </div>
        <div class="notification-wrapper">
          <button class="notification-button" @click="toggleNotificationPanel">
            <svg viewBox="0 0 24 24" class="bell-icon">
              <path d="M12 22c1.1 0 2-.9 2-2h-4c0 1.1.9 2 2 2zm6-6v-5c0-3.07-1.64-5.64-4.5-6.32V4c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5v.68C7.63 5.36 6 7.92 6 11v5l-2 2v1h16v-1l-2-2z"></path>
            </svg>
            <span class="notification-badge" v-if="notificationList.length > 0">{{ notificationList.length }}</span>
          </button>
          
          <!-- 알림 패널 -->
          <div class="notification-panel" v-if="showNotificationPanel">
            <div class="notification-panel-header">
              <h3>알림</h3>
              <button class="clear-all" @click="clearAllNotifications" v-if="notificationList.length > 0">모두 지우기</button>
            </div>
            <div class="notification-panel-content">
              <div v-if="notificationList.length === 0" class="no-notifications">
                알림이 없습니다.
              </div>
              <div v-for="(notification, index) in notificationList" :key="index" class="notification-item">
                <div class="notification-item-icon">
                  <svg viewBox="0 0 24 24" class="success-icon">
                    <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"></path>
                  </svg>
                </div>
                <div class="notification-item-content">
                  <div class="notification-item-title">{{ notification.title }}</div>
                  <div class="notification-item-message">{{ notification.message }}</div>
                  <div class="notification-item-time">{{ formatNotificationTime(notification.time) }}</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </nav>
    <div class="main-content">
      <header>
        <div class="search-header" v-if="isSearchActive">
          <h2>
            <span v-if="filteredVideos.length">
              '{{ searchQuery }}' 검색 결과 ({{ filteredVideos.length }}개)
            </span>
            <span v-else>
              '{{ searchQuery }}'에 대한 검색 결과가 없습니다
            </span>
          </h2>
          <button class="reset-search-button" @click="clearSearch">
            <svg viewBox="0 0 24 24" class="reset-icon">
              <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"></path>
            </svg>
            필터링 초기화
          </button>
        </div>
        
        <div class="view-header" v-if="currentView === 'history'">
          <h2>시청 기록</h2>
          <button class="clear-history-button" @click="clearWatchHistory" v-if="watchHistory.length > 0">
            <svg viewBox="0 0 24 24" class="trash-icon">
              <path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"></path>
            </svg>
            기록 지우기
          </button>
        </div>
        
        <div class="view-header" v-if="currentView === 'watchlater'">
          <h2>나중에 볼 동영상</h2>
          <button class="clear-watchlater-button" @click="clearWatchLater" v-if="watchLaterList.length > 0">
            <svg viewBox="0 0 24 24" class="trash-icon">
              <path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"></path>
            </svg>
            목록 지우기
          </button>
        </div>
      </header>
      <main>
        <!-- 홈 화면 (기존 비디오 목록) -->
        <div v-if="currentView === 'home'" class="videos-container">
          <div v-if="displayVideos.length === 0" class="no-videos">
            동영상이 없습니다. '만들기' 버튼을 클릭하여 첫 동영상을 업로드하세요!
          </div>
          <div 
            v-for="(video, index) in displayVideos" 
            :key="index" 
            class="video-card"
            @click="openVideoDetail(video)"
          >
            <div class="video-thumbnail">
              <video :src="video.url" controls v-if="video.url"></video>
              <div class="thumbnail-placeholder" v-else>
                <div class="refresh-notice" v-if="video.isRefreshed">
                  <svg viewBox="0 0 24 24" class="refresh-icon">
                    <path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 9h7V2l-2.35 4.35z"/>
                  </svg>
                  <div class="refresh-text">
                    <div>새로고침 후 재생할 수 없습니다.</div>
                    <div>새 비디오를 업로드하세요.</div>
                  </div>
                </div>
                <svg v-else viewBox="0 0 24 24" class="video-placeholder-icon">
                  <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 14.5v-9l6 4.5-6 4.5z"></path>
                </svg>
              </div>
              <button class="video-delete-button" @click="deleteVideo(video.id)" title="삭제">
                <svg viewBox="0 0 24 24" class="trash-icon">
                  <path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"></path>
                </svg>
              </button>
            </div>
            <div class="video-info">
              <div class="video-header">
                <h3 class="video-title">{{ video.title || '제목 없음' }}</h3>
              </div>
              <p class="video-details">
                {{ formatDate(video.uploadDate) }} 
                <span class="video-size">{{ formatFileSize(video.size) }}</span>
              </p>
            </div>
          </div>
        </div>
        
        <!-- 구독 화면 -->
        <div v-if="currentView === 'subscriptions'" class="videos-container">
          <div v-if="subscribedChannels.length === 0" class="no-videos">
            구독한 채널이 없습니다. 비디오 상세 페이지에서 "구독" 버튼을 클릭하여 채널을 구독하세요.
          </div>
          <div v-else>
            <div class="subscribed-channels">
              <h3>구독 채널</h3>
              <div class="channel-list">
                <div 
                  v-for="(channel, index) in subscribedChannels" 
                  :key="index" 
                  class="channel-item"
                >
                  <div class="channel-avatar">
                    <div class="avatar-circle">
                      {{ getChannelInitial(channel.name) }}
                    </div>
                  </div>
                  <div class="channel-name">{{ channel.name }}</div>
                  <button class="unsubscribe-button" @click.stop="unsubscribeChannel(index)">구독 취소</button>
                </div>
              </div>
            </div>
            
            <h3 class="section-title">구독 채널의 동영상</h3>
            <div 
              v-for="(video, index) in subscriptionVideos" 
              :key="index" 
              class="video-card"
              @click="openVideoDetail(video)"
            >
              <div class="video-thumbnail">
                <video :src="video.url" v-if="video.url && !video.isRefreshed"></video>
                <div class="thumbnail-placeholder" v-else>
                  <div class="refresh-notice" v-if="video.isRefreshed">
                    <svg viewBox="0 0 24 24" class="refresh-icon">
                      <path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 9h7V2l-2.35 4.35z"/>
                    </svg>
                    <div class="refresh-text">
                      <div>새로고침 후 재생할 수 없습니다.</div>
                      <div>새 비디오를 업로드하세요.</div>
                    </div>
                  </div>
                  <svg v-else viewBox="0 0 24 24" class="video-placeholder-icon">
                    <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 14.5v-9l6 4.5-6 4.5z"></path>
                  </svg>
                </div>
                <div class="channel-tag">{{ getChannelByVideoId(video.id).name }}</div>
              </div>
              <div class="video-info">
                <div class="video-header">
                  <h3 class="video-title">{{ video.title || '제목 없음' }}</h3>
                </div>
                <p class="video-details">
                  {{ formatDate(video.uploadDate) }} 
                  <span class="video-size">{{ formatFileSize(video.size) }}</span>
                </p>
              </div>
            </div>
          </div>
        </div>
        
        <!-- 시청 기록 화면 -->
        <div v-if="currentView === 'history'" class="videos-container">
          <div v-if="watchHistory.length === 0" class="no-videos">
            시청 기록이 없습니다. 동영상을 시청하면 여기에 표시됩니다.
          </div>
          <div 
            v-for="(historyItem, index) in watchHistory" 
            :key="index" 
            class="video-card"
            @click="openVideoDetail(historyItem.video)"
          >
            <div class="video-thumbnail">
              <video :src="historyItem.video.url" v-if="historyItem.video.url && !historyItem.video.isRefreshed"></video>
              <div class="thumbnail-placeholder" v-else>
                <div class="refresh-notice" v-if="historyItem.video.isRefreshed">
                  <svg viewBox="0 0 24 24" class="refresh-icon">
                    <path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 9h7V2l-2.35 4.35z"/>
                  </svg>
                  <div class="refresh-text">
                    <div>새로고침 후 재생할 수 없습니다.</div>
                    <div>새 비디오를 업로드하세요.</div>
                  </div>
                </div>
                <svg v-else viewBox="0 0 24 24" class="video-placeholder-icon">
                  <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 14.5v-9l6 4.5-6 4.5z"></path>
                </svg>
              </div>
              <button class="video-delete-button" @click.stop="removeFromHistory(index)" title="기록에서 삭제">
                <svg viewBox="0 0 24 24" class="trash-icon">
                  <path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"></path>
                </svg>
              </button>
            </div>
            <div class="video-info">
              <div class="video-header">
                <h3 class="video-title">{{ historyItem.video.title || '제목 없음' }}</h3>
              </div>
              <p class="video-details">
                <span class="watch-date">{{ formatWatchDate(historyItem.watchDate) }} 시청</span>
                <span class="video-size">{{ formatFileSize(historyItem.video.size) }}</span>
              </p>
            </div>
          </div>
        </div>
        
        <!-- 나중에 볼 동영상 화면 -->
        <div v-if="currentView === 'watchlater'" class="videos-container">
          <div v-if="watchLaterList.length === 0" class="no-videos">
            나중에 볼 동영상이 없습니다. 동영상 상세 페이지에서 "나중에 보기" 버튼을 클릭하여 추가하세요.
          </div>
          <div 
            v-for="(video, index) in watchLaterList" 
            :key="index" 
            class="video-card"
            @click="openVideoDetail(video)"
          >
            <div class="video-thumbnail">
              <video :src="video.url" v-if="video.url && !video.isRefreshed"></video>
              <div class="thumbnail-placeholder" v-else>
                <div class="refresh-notice" v-if="video.isRefreshed">
                  <svg viewBox="0 0 24 24" class="refresh-icon">
                    <path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 9h7V2l-2.35 4.35z"/>
                  </svg>
                  <div class="refresh-text">
                    <div>새로고침 후 재생할 수 없습니다.</div>
                    <div>새 비디오를 업로드하세요.</div>
                  </div>
                </div>
                <svg v-else viewBox="0 0 24 24" class="video-placeholder-icon">
                  <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 14.5v-9l6 4.5-6 4.5z"></path>
                </svg>
              </div>
              <button class="video-delete-button" @click.stop="removeFromWatchLater(index)" title="목록에서 삭제">
                <svg viewBox="0 0 24 24" class="trash-icon">
                  <path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"></path>
                </svg>
              </button>
            </div>
            <div class="video-info">
              <div class="video-header">
                <h3 class="video-title">{{ video.title || '제목 없음' }}</h3>
              </div>
              <p class="video-details">
                {{ formatDate(video.uploadDate) }} 
                <span class="video-size">{{ formatFileSize(video.size) }}</span>
              </p>
            </div>
          </div>
        </div>
        
        <!-- 쇼츠 화면 수정 - 클릭 없이 바로 재생되도록 변경 -->
        <div v-if="currentView === 'shorts'" class="shorts-container">
          <h2 class="shorts-title">쇼츠</h2>
          
          <div v-if="shortVideos.length === 0" class="no-shorts">
            쇼츠가 없습니다. 50초 이하의 짧은 동영상을 업로드하면 여기에 표시됩니다.
          </div>
          
          <div v-else class="shorts-scroll">
            <div 
              v-for="(video, index) in shortVideos" 
              :key="index" 
              class="shorts-card"
            >
              <div class="shorts-thumbnail">
                <video 
                  :src="video.url" 
                  controls 
                  loop
                  autoplay="true"
                  muted
                  @click="togglePlay($event)"
                  v-if="video.url && !video.isRefreshed"
                ></video>
                <div class="thumbnail-placeholder" v-else>
                  <div class="refresh-notice" v-if="video.isRefreshed">
                    <svg viewBox="0 0 24 24" class="refresh-icon">
                      <path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 9h7V2l-2.35 4.35z"/>
                    </svg>
                    <div class="refresh-text">
                      <div>새로고침 후 재생할 수 없습니다.</div>
                      <div>새 비디오를 업로드하세요.</div>
                    </div>
                  </div>
                  <svg v-else viewBox="0 0 24 24" class="video-placeholder-icon large-icon">
                    <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 14.5v-9l6 4.5-6 4.5z"></path>
                  </svg>
                </div>
                <div class="shorts-badge">쇼츠</div>
                <div class="shorts-duration">{{ formatDuration(video.duration) }}</div>
              </div>
              <div class="shorts-info">
                <h3 class="shorts-video-title">{{ video.title || '제목 없음' }}</h3>
                <div class="video-details">
                  <span class="views-count">조회수 {{ formatCount(video.views || 0) }}회</span>
                  <span class="upload-date">{{ formatDate(video.uploadDate) }}</span>
                </div>
                
                <div class="shorts-actions">
                  <button 
                    class="shorts-action-button like-button"
                    @click.stop="toggleLike(video)"
                    :class="{ 'active': video.liked }"
                  >
                    <svg viewBox="0 0 24 24" class="like-icon">
                      <path d="M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-1.91l-.01-.01L23 10z"></path>
                    </svg>
                    <span>{{ formatCount(video.likes || 0) }}</span>
                  </button>
                  <button 
                    class="shorts-action-button dislike-button"
                    @click.stop="toggleDislike(video)"
                    :class="{ 'active': video.disliked }"
                  >
                    <svg viewBox="0 0 24 24" class="dislike-icon">
                      <path d="M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v1.91l.01.01L1 14c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z"></path>
                    </svg>
                    <span>{{ formatCount(video.dislikes || 0) }}</span>
                  </button>
                  <button class="shorts-action-button comment-button" @click.stop="openVideoDetail(video)">
                    <svg viewBox="0 0 24 24" class="comment-icon">
                      <path d="M21.99 4c0-1.1-.89-2-1.99-2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14l4 4-.01-18zM18 14H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z"></path>
                    </svg>
                    <span>댓글</span>
                  </button>
                  <button class="shorts-action-button share-button">
                    <svg viewBox="0 0 24 24" class="share-icon">
                      <path d="M18 16.08c-.76 0-1.44.3-1.96.77L8.91 12.7c.05-.23.09-.46.09-.7s-.04-.47-.09-.7l7.05-4.11c.54.5 1.25.81 2.04.81 1.66 0 3-1.34 3-3s-1.34-3-3-3-3 1.34-3 3c0 .24.04.47.09.7L8.04 9.81C7.5 9.31 6.79 9 6 9c-1.66 0-3 1.34-3 3s1.34 3 3 3c.79 0 1.5-.31 2.04-.81l7.12 4.16c-.05.21-.08.43-.08.65 0 1.61 1.31 2.92 2.92 2.92 1.61 0 2.92-1.31 2.92-2.92s-1.31-2.92-2.92-2.92z"></path>
                    </svg>
                    <span>공유</span>
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>
    </div>
    
    <!-- 비디오 업로드 모달 -->
    <div class="modal-overlay" v-if="showUploadModal" @click="closeModal"></div>
    <div class="upload-modal" v-if="showUploadModal">
      <div class="modal-header">
        <h2>동영상 업로드</h2>
        <button class="close-button" @click="closeModal">×</button>
      </div>
      <div class="modal-content">
        <div class="upload-area" @click="triggerFileInput" @drop.prevent="handleFileDrop" @dragover.prevent>
          <svg viewBox="0 0 24 24" class="upload-cloud-icon">
            <path d="M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM14 13v4h-4v-4H7l5-5 5 5h-3z"/>
          </svg>
          <p>파일을 드래그하거나 클릭하여 동영상을 업로드하세요</p>
          <input type="file" ref="fileInput" accept="video/*" style="display: none" @change="handleFileSelect">
        </div>
        <div class="video-details-form" v-if="selectedFile && !uploading">
          <div class="form-group">
            <label for="video-title">동영상 제목</label>
            <input type="text" id="video-title" v-model="videoTitle" placeholder="동영상 제목을 입력하세요">
          </div>
          <div class="form-group">
            <label>동영상 유형</label>
            <div class="radio-group">
              <label class="radio-label">
                <input type="radio" v-model="videoType" value="normal">
                일반 동영상
              </label>
              <label class="radio-label">
                <input type="radio" v-model="videoType" value="shorts">
                쇼츠 (50초 이하)
              </label>
            </div>
          </div>
        </div>
        <div class="upload-preview" v-if="selectedFile">
          <div class="file-info">
            <div class="file-name">{{selectedFile.name}}</div>
            <div class="file-size">{{formatFileSize(selectedFile.size)}}</div>
          </div>
          <div class="upload-actions">
            <button class="cancel-button" @click="cancelUpload">취소</button>
            <button class="upload-button" @click="uploadVideo">업로드</button>
          </div>
        </div>
        <div class="upload-progress" v-if="uploading">
          <div class="progress-bar">
            <div class="progress-fill" :style="{width: uploadProgress + '%'}"></div>
          </div>
          <div class="progress-text">{{uploadProgress}}% 완료</div>
        </div>
      </div>
    </div>
    
    <!-- 알림 창 -->
    <div class="notification-container" v-if="notification.show">
      <div class="notification" :class="notification.type">
        <div class="notification-icon">
          <svg v-if="notification.type === 'success'" viewBox="0 0 24 24" class="success-icon">
            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"></path>
          </svg>
          <svg v-if="notification.type === 'error'" viewBox="0 0 24 24" class="error-icon">
            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z"></path>
          </svg>
        </div>
        <div class="notification-content">
          <div class="notification-title">{{ notification.title }}</div>
          <div class="notification-message">{{ notification.message }}</div>
        </div>
        <button class="notification-close" @click="closeNotification">
          <svg viewBox="0 0 24 24" class="close-icon">
            <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"></path>
          </svg>
        </button>
      </div>
    </div>
    
    <!-- 비디오 상세 페이지 -->
    <VideoDetail 
      v-if="showVideoDetail" 
      :video="selectedVideo" 
      @close="closeVideoDetail" 
    />
    
    <!-- 검색 페이지 -->
    <Search 
      v-if="showSearchPage" 
      :videos="videos" 
      @back="closeSearchPage" 
      @selectVideo="selectSearchResult"
    />
  </div>
</template>

<script setup lang="ts">
import { ref, computed, onMounted, watch } from 'vue';
import Search from './Search.vue'
import VideoDetail from './VideoDetail.vue'

const showCreateMenu = ref(false);
const showUploadModal = ref(false);
const fileInput = ref<HTMLInputElement | null>(null);
const selectedFile = ref<File | null>(null);
const uploading = ref(false);
const uploadProgress = ref(0);
const videos = ref<Array<{
  id: string,
  title: string,
  url: string | null,
  size: number,
  uploadDate: Date,
  isRefreshed: boolean
}>>([]);
const videoTitle = ref('');
const videoUrl = ref<string | null>(null);
const activeVideoMenu = ref<string | null>(null);
const notification = ref({
  show: false,
  type: 'success',
  title: '',
  message: '',
  timeout: null as number | null
});
const notificationList = ref<Array<{
  id: string,
  title: string,
  message: string,
  type: 'success' | 'error',
  time: Date,
  read: boolean
}>>([]);
const showNotificationPanel = ref(false);
const searchQuery = ref('');
const isSearchActive = ref(false);
const showSearchResults = ref(false);
const showSearchPage = ref(false);
const showVideoDetail = ref(false);
const selectedVideo = ref(null);
const currentView = ref('home');
const watchHistory = ref<Array<{
  video: any,
  watchDate: Date
}>>([]);
const watchLaterList = ref<Array<any>>([]);
const subscribedChannels = ref<Array<{
  id: string,
  name: string,
  subscribedDate: Date
}>>([]);
const videoType = ref('normal');

const subscriptionVideos = computed(() => {
  // 구독한 채널의 모든 비디오 가져오기
  const channelIds = subscribedChannels.value.map(channel => channel.id);
  return videos.value.filter(video => {
    const videoChannel = getChannelByVideoId(video.id);
    return videoChannel && channelIds.includes(videoChannel.id);
  });
});

// 로컬 스토리지에서 동영상 정보 불러오기
onMounted(() => {
  loadVideosFromStorage();
  loadNotificationsFromStorage();
  loadWatchHistory();
  loadWatchLater();
  loadSubscriptions();
  
  // 문서 클릭 이벤트 처리 (알림 패널 외부 클릭 시 닫기)
  document.addEventListener('click', (event) => {
    const target = event.target as HTMLElement;
    const notificationPanel = document.querySelector('.notification-panel');
    const notificationButton = document.querySelector('.notification-button');
    
    if (showNotificationPanel.value && 
        notificationPanel && 
        notificationButton && 
        !notificationPanel.contains(target) && 
        !notificationButton.contains(target)) {
      showNotificationPanel.value = false;
    }
    
    // 검색 결과 드롭다운 외부 클릭 시 닫기
    const searchForm = document.querySelector('.search-form');
    if (showSearchResults.value && 
        searchForm && 
        !searchForm.contains(target)) {
      showSearchResults.value = false;
    }
  });
  
  // 동영상 재생 시 시청 기록 업데이트 이벤트 리스너
  document.addEventListener('videoPlayed', (event: any) => {
    if (event.detail && event.detail.video) {
      addToWatchHistory(event.detail.video);
    }
  });
  
  // 나중에 볼 동영상 추가 이벤트 리스너
  document.addEventListener('addToWatchLater', (event: any) => {
    if (event.detail && event.detail.video) {
      const added = addToWatchLater(event.detail.video);
      if (added) {
        showNotification(
          'success',
          '동영상 추가됨',
          '나중에 볼 동영상 목록에 추가되었습니다.'
        );
      }
    }
  });
  
  // 구독 이벤트 리스너
  document.addEventListener('subscribeChannel', (event: any) => {
    if (event.detail && event.detail.channel) {
      subscribeChannel(event.detail.channel);
    }
  });
  
  // 비디오 객체에 쇼츠 여부와 재생 시간 추가
  videos.value = videos.value.map(video => {
    // 기존 값이 있으면 그대로 유지
    const duration = video.duration || Math.floor(Math.random() * 240) + 60;
    return {
      ...video,
      isShort: video.isShort || false,
      duration: duration,
      views: video.views || Math.floor(Math.random() * 1000),
      likes: video.likes || Math.floor(Math.random() * 100),
      dislikes: video.dislikes || Math.floor(Math.random() * 10),
      liked: video.liked || false,
      disliked: video.disliked || false
    };
  });
});

// 로컬 스토리지에서 동영상 정보 불러오는 함수
const loadVideosFromStorage = () => {
  const savedVideos = localStorage.getItem('uploadedVideos');
  if (savedVideos) {
    try {
      const parsedVideos = JSON.parse(savedVideos);
      // 날짜 객체 복원 및 URL을 null로 설정하고 isRefreshed 플래그 추가
      videos.value = parsedVideos.map((video: any) => ({
        ...video,
        url: null, // 새로고침 후 URL을 null로 설정
        uploadDate: new Date(video.uploadDate),
        isRefreshed: true // 새로고침 후 로드된 비디오 표시
      }));
    } catch (e) {
      console.error('동영상 데이터를 불러오는 중 오류가 발생했습니다:', e);
    }
  }
};

// 로컬 스토리지에 동영상 정보 저장하는 함수
const saveVideosToStorage = () => {
  try {
    // URL 정보는 제외하고 저장 (새로고침 후 사용할 수 없기 때문)
    const videosToSave = videos.value.map(video => {
      const { url, isRefreshed, ...videoData } = video;
      return videoData;
    });
    localStorage.setItem('uploadedVideos', JSON.stringify(videosToSave));
  } catch (e) {
    console.error('동영상 데이터를 저장하는 중 오류가 발생했습니다:', e);
  }
};

const toggleCreateMenu = () => {
  showCreateMenu.value = !showCreateMenu.value;
};

const openUploadModal = () => {
  showUploadModal.value = true;
  showCreateMenu.value = false;
};

const closeModal = () => {
  showUploadModal.value = false;
  selectedFile.value = null;
  uploading.value = false;
  uploadProgress.value = 0;
  videoTitle.value = '';
  videoUrl.value = null;
};

const triggerFileInput = () => {
  if (fileInput.value) {
    fileInput.value.click();
  }
};

const handleFileSelect = (event: Event) => {
  const input = event.target as HTMLInputElement;
  if (input.files && input.files.length > 0) {
    selectedFile.value = input.files[0];
    videoTitle.value = selectedFile.value.name.split('.')[0] || '제목 없음';
  }
};

const handleFileDrop = (event: DragEvent) => {
  if (event.dataTransfer?.files && event.dataTransfer.files.length > 0) {
    selectedFile.value = event.dataTransfer.files[0];
    videoTitle.value = selectedFile.value.name.split('.')[0] || '제목 없음';
  }
};

const formatFileSize = (bytes: number): string => {
  if (bytes === 0) return '0 Bytes';
  
  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
  const i = Math.floor(Math.log(bytes) / Math.log(1024));
  
  return parseFloat((bytes / Math.pow(1024, i)).toFixed(2)) + ' ' + sizes[i];
};

const formatDate = (date: Date): string => {
  const now = new Date();
  const diffTime = Math.abs(now.getTime() - date.getTime());
  const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
  
  if (diffDays === 0) {
    return '오늘';
  } else if (diffDays === 1) {
    return '어제';
  } else if (diffDays < 7) {
    return `${diffDays}일 전`;
  } else if (diffDays < 30) {
    return `${Math.floor(diffDays / 7)}주 전`;
  } else {
    return `${Math.floor(diffDays / 30)}개월 전`;
  }
};

const cancelUpload = () => {
  selectedFile.value = null;
  videoTitle.value = '';
};

const createVideoObjectUrl = (file: File): Promise<string> => {
  return new Promise((resolve) => {
    const url = URL.createObjectURL(file);
    resolve(url);
  });
};

const showNotification = (type: 'success' | 'error', title: string, message: string, duration: number = 4000) => {
  // 기존 타이머가 있으면 제거
  if (notification.value.timeout) {
    clearTimeout(notification.value.timeout);
  }
  
  // 알림 정보 설정
  notification.value = {
    show: true,
    type,
    title,
    message,
    timeout: null
  };
  
  // 지정된 시간 후 알림 닫기
  notification.value.timeout = setTimeout(() => {
    closeNotification();
  }, duration) as unknown as number;
  
  // 알림 목록에 추가
  const newNotification = {
    id: 'notification_' + Date.now(),
    title,
    message,
    type,
    time: new Date(),
    read: false
  };
  
  notificationList.value.unshift(newNotification);
  saveNotificationsToStorage();
};

const closeNotification = () => {
  notification.value.show = false;
  if (notification.value.timeout) {
    clearTimeout(notification.value.timeout);
    notification.value.timeout = null;
  }
};

const uploadVideo = async () => {
  if (!selectedFile.value) return;
  
  uploading.value = true;
  uploadProgress.value = 0;
  
  // 업로드 진행 상황 시뮬레이션
  const interval = setInterval(() => {
    uploadProgress.value += 5;
    if (uploadProgress.value >= 100) {
      clearInterval(interval);
      setTimeout(async () => {
        const url = await createVideoObjectUrl(selectedFile.value!);
        
        // 비디오 제목 가져오기
        const title = videoTitle.value || selectedFile.value!.name.split('.')[0] || '제목 없음';
        
        // 비디오 재생 시간 계산 (실제로는 메타데이터에서 가져오는 것이 좋음)
        // 여기서는 쇼츠인 경우 임의로 10~50초 사이 값을, 일반 동영상은 60~300초 사이 값을 할당
        const duration = videoType.value === 'shorts' 
          ? Math.floor(Math.random() * 40) + 10  // 10~50초
          : Math.floor(Math.random() * 240) + 60; // 60~300초
        
        // 업로드된 비디오 추가
        const newVideo = {
          id: 'video_' + Date.now(),
          title: title,
          url: url,
          size: selectedFile.value!.size,
          uploadDate: new Date(),
          isRefreshed: false, // 방금 업로드된 비디오는 새로고침 상태가 아님
          isShort: videoType.value === 'shorts',
          duration: duration,
          views: Math.floor(Math.random() * 1000), // 임의의 조회수
          likes: 0,
          dislikes: 0,
          liked: false,
          disliked: false
        };
        
        videos.value.unshift(newVideo);
        saveVideosToStorage();
        
        // 알림 표시
        showNotification(
          'success', 
          '업로드 완료', 
          `'${title}' ${videoType.value === 'shorts' ? '쇼츠' : '동영상'}가 성공적으로 업로드되었습니다.`
        );
        
        closeModal();
      }, 500);
    }
  }, 300);
};

// 비디오 삭제 함수
const deleteVideo = (videoId: string) => {
  if (confirm('이 동영상을 삭제하시겠습니까?')) {
    // 비디오 배열에서 해당 ID의 비디오 제거
    videos.value = videos.value.filter(video => video.id !== videoId);
    // 로컬 스토리지 업데이트
    saveVideosToStorage();
  }
};

// 로컬 스토리지에서 알림 정보 불러오는 함수
const loadNotificationsFromStorage = () => {
  const savedNotifications = localStorage.getItem('notifications');
  if (savedNotifications) {
    try {
      const parsedNotifications = JSON.parse(savedNotifications);
      // 날짜 객체 복원
      notificationList.value = parsedNotifications.map((notification: any) => ({
        ...notification,
        time: new Date(notification.time)
      }));
    } catch (e) {
      console.error('알림 데이터를 불러오는 중 오류가 발생했습니다:', e);
    }
  }
};

// 로컬 스토리지에 알림 정보 저장하는 함수
const saveNotificationsToStorage = () => {
  try {
    localStorage.setItem('notifications', JSON.stringify(notificationList.value));
  } catch (e) {
    console.error('알림 데이터를 저장하는 중 오류가 발생했습니다:', e);
  }
};

// 알림 패널 토글 함수
const toggleNotificationPanel = () => {
  showNotificationPanel.value = !showNotificationPanel.value;
  
  // 패널을 열면 모든 알림을 읽음 상태로 변경
  if (showNotificationPanel.value) {
    notificationList.value.forEach(notification => {
      notification.read = true;
    });
    saveNotificationsToStorage();
  }
};

// 모든 알림 지우기 함수
const clearAllNotifications = () => {
  notificationList.value = [];
  saveNotificationsToStorage();
};

// 알림 시간 포맷팅 함수
const formatNotificationTime = (date: Date) => {
  const now = new Date();
  const diffTime = Math.abs(now.getTime() - date.getTime());
  const diffMinutes = Math.floor(diffTime / (1000 * 60));
  
  if (diffMinutes < 1) {
    return '방금 전';
  } else if (diffMinutes < 60) {
    return `${diffMinutes}분 전`;
  } else if (diffMinutes < 1440) {
    return `${Math.floor(diffMinutes / 60)}시간 전`;
  } else {
    return `${Math.floor(diffMinutes / 1440)}일 전`;
  }
};

// 검색 기능
const searchVideos = () => {
  if (searchQuery.value.trim() !== '') {
    isSearchActive.value = true;
    showSearchResults.value = false;
  } else {
    isSearchActive.value = false;
  }
};

// 검색 결과에 따른 필터링된 비디오 목록
const filteredVideos = computed(() => {
  if (searchQuery.value.trim() === '') {
    return [];
  }
  
  const query = searchQuery.value.trim().toLowerCase();
  return videos.value.filter(video => 
    video.title.toLowerCase().includes(query)
  );
});

// 검색 결과 선택 시 처리
const selectSearchResult = (video) => {
  searchQuery.value = video.title;
  isSearchActive.value = true;
  showSearchResults.value = false;
  showSearchPage.value = false;
};

// 검색어 입력 시 드롭다운 표시
watch(searchQuery, (newValue) => {
  if (newValue.trim()) {
    showSearchResults.value = true;
  } else {
    showSearchResults.value = false;
  }
});

// 화면에 표시할 비디오 목록 (검색 결과 또는 전체 목록)
const displayVideos = computed(() => {
  let filteredVideos = videos.value.filter(video => 
    // 일반 동영상만 표시 (쇼츠 제외)
    !video.isShort && (video.duration > 50 || video.duration === undefined)
  );
  
  if (isSearchActive.value && searchQuery.value.trim() !== '') {
    // 검색 결과일 경우 검색어로 추가 필터링
    filteredVideos = filteredVideos.filter(video => 
      video.title.toLowerCase().includes(searchQuery.value.trim().toLowerCase())
    );
  }
  
  return filteredVideos;
});

// 검색 초기화 함수
const clearSearch = () => {
  searchQuery.value = '';
  isSearchActive.value = false;
  showSearchResults.value = false;
};

// 검색 페이지 열기
const openSearchPage = () => {
  showSearchPage.value = true;
};

// 검색 페이지 닫기
const closeSearchPage = () => {
  showSearchPage.value = false;
};

// 비디오 상세 페이지 열기
const openVideoDetail = (video) => {
  selectedVideo.value = video;
  showVideoDetail.value = true;
  
  // 시청 기록에 추가
  addToWatchHistory(video);
};

// 비디오 상세 페이지 닫기
const closeVideoDetail = () => {
  showVideoDetail.value = false;
};

// 시청 기록 관련 함수
const loadWatchHistory = () => {
  const savedHistory = localStorage.getItem('watchHistory');
  if (savedHistory) {
    try {
      const parsedHistory = JSON.parse(savedHistory);
      // 날짜 객체 복원
      watchHistory.value = parsedHistory.map((item: any) => ({
        ...item,
        watchDate: new Date(item.watchDate)
      }));
    } catch (e) {
      console.error('시청 기록을 불러오는 중 오류가 발생했습니다:', e);
    }
  }
};

const saveWatchHistory = () => {
  try {
    localStorage.setItem('watchHistory', JSON.stringify(watchHistory.value));
  } catch (e) {
    console.error('시청 기록을 저장하는 중 오류가 발생했습니다:', e);
  }
};

const addToWatchHistory = (video) => {
  // 이미 있는 항목 제거 (중복 방지)
  watchHistory.value = watchHistory.value.filter(item => item.video.id !== video.id);
  
  // 새 항목 추가
  watchHistory.value.unshift({
    video,
    watchDate: new Date()
  });
  
  // 최대 항목 수 제한 (선택사항)
  if (watchHistory.value.length > 50) {
    watchHistory.value = watchHistory.value.slice(0, 50);
  }
  
  saveWatchHistory();
};

const removeFromHistory = (index) => {
  watchHistory.value.splice(index, 1);
  saveWatchHistory();
};

const clearWatchHistory = () => {
  if (confirm('시청 기록을 모두 삭제하시겠습니까?')) {
    watchHistory.value = [];
    saveWatchHistory();
  }
};

const formatWatchDate = (date) => {
  const now = new Date();
  const watchDate = new Date(date);
  
  // 같은 날짜인지 확인
  const isSameDay = now.getDate() === watchDate.getDate() && 
                    now.getMonth() === watchDate.getMonth() && 
                    now.getFullYear() === watchDate.getFullYear();
  
  if (isSameDay) {
    // 시간 형식 (오늘인 경우)
    const hours = watchDate.getHours();
    const minutes = watchDate.getMinutes();
    return `오늘 ${hours < 10 ? '0' + hours : hours}:${minutes < 10 ? '0' + minutes : minutes}`;
  } else {
    // 날짜 형식 (오늘이 아닌 경우)
    const year = watchDate.getFullYear();
    const month = watchDate.getMonth() + 1;
    const day = watchDate.getDate();
    return `${year}.${month < 10 ? '0' + month : month}.${day < 10 ? '0' + day : day}`;
  }
};

const setCurrentView = (view) => {
  currentView.value = view;
};

// 나중에 볼 동영상 관련 함수
const loadWatchLater = () => {
  const savedList = localStorage.getItem('watchLaterList');
  if (savedList) {
    try {
      const parsedList = JSON.parse(savedList);
      // 날짜 객체 복원
      watchLaterList.value = parsedList.map((video: any) => ({
        ...video,
        uploadDate: new Date(video.uploadDate)
      }));
    } catch (e) {
      console.error('나중에 볼 동영상 목록을 불러오는 중 오류가 발생했습니다:', e);
    }
  }
};

const saveWatchLater = () => {
  try {
    localStorage.setItem('watchLaterList', JSON.stringify(watchLaterList.value));
  } catch (e) {
    console.error('나중에 볼 동영상 목록을 저장하는 중 오류가 발생했습니다:', e);
  }
};

const addToWatchLater = (video) => {
  // 이미 목록에 있는지 확인
  const exists = watchLaterList.value.some(item => item.id === video.id);
  if (exists) {
    // 이미 있다면 아무것도 하지 않음
    return false;
  }
  
  // 새 항목 추가
  watchLaterList.value.push({...video});
  saveWatchLater();
  return true;
};

const removeFromWatchLater = (index) => {
  watchLaterList.value.splice(index, 1);
  saveWatchLater();
};

const clearWatchLater = () => {
  if (confirm('나중에 볼 동영상 목록을 모두 삭제하시겠습니까?')) {
    watchLaterList.value = [];
    saveWatchLater();
  }
};

const isInWatchLater = (videoId) => {
  return watchLaterList.value.some(video => video.id === videoId);
};

// 로컬 스토리지에서 구독 정보 불러오기
const loadSubscriptions = () => {
  const savedSubscriptions = localStorage.getItem('subscribedChannels');
  if (savedSubscriptions) {
    try {
      const parsedSubscriptions = JSON.parse(savedSubscriptions);
      // 날짜 객체 복원
      subscribedChannels.value = parsedSubscriptions.map((channel: any) => ({
        ...channel,
        subscribedDate: new Date(channel.subscribedDate)
      }));
    } catch (e) {
      console.error('구독 정보를 불러오는 중 오류가 발생했습니다:', e);
    }
  }
};

const saveSubscriptions = () => {
  try {
    localStorage.setItem('subscribedChannels', JSON.stringify(subscribedChannels.value));
  } catch (e) {
    console.error('구독 정보를 저장하는 중 오류가 발생했습니다:', e);
  }
};

// 비디오 ID로 채널 정보 가져오기 (실제로는 API 호출일 수 있음)
const getChannelByVideoId = (videoId) => {
  // 간단한 구현: 비디오 ID에서 채널 ID를 생성
  // 실제로는 비디오와 채널 관계를 관리하는 데이터베이스가 필요합니다
  const channelId = 'channel_' + videoId.split('_')[1];
  // 해당 채널이 구독되어 있는지 확인
  const channel = subscribedChannels.value.find(ch => ch.id === channelId);
  if (channel) {
    return channel;
  }
  
  // 구독되지 않은 채널인 경우 기본 정보 반환
  return {
    id: channelId,
    name: '채널 ' + videoId.split('_')[1]
  };
};

// 채널 구독 추가
const subscribeChannel = (channelInfo) => {
  // 이미 구독 중인지 확인
  const exists = subscribedChannels.value.some(channel => channel.id === channelInfo.id);
  if (exists) {
    return false;
  }
  
  // 새 구독 추가
  subscribedChannels.value.push({
    ...channelInfo,
    subscribedDate: new Date()
  });
  
  saveSubscriptions();
  
  // 알림 표시
  showNotification(
    'success',
    '구독 추가됨',
    `'${channelInfo.name}' 채널을 구독했습니다.`
  );
  
  return true;
};

// 채널 구독 취소
const unsubscribeChannel = (index) => {
  if (confirm('이 채널의 구독을 취소하시겠습니까?')) {
    const channelName = subscribedChannels.value[index].name;
    subscribedChannels.value.splice(index, 1);
    saveSubscriptions();
    
    // 알림 표시
    showNotification(
      'success',
      '구독 취소됨',
      `'${channelName}' 채널의 구독을 취소했습니다.`
    );
  }
};

// 채널 이니셜 가져오기
const getChannelInitial = (name) => {
  return name.charAt(0).toUpperCase();
};

// 쇼츠 비디오 계산 - 명확하게 쇼츠만 필터링
const shortVideos = computed(() => {
  return videos.value.filter(video => 
    video.isShort === true || (video.duration && video.duration <= 50)
  );
});

// 동영상 재생 시간 포맷팅 함수
const formatDuration = (seconds) => {
  if (!seconds) return '00:00';
  const mins = Math.floor(seconds / 60);
  const secs = seconds % 60;
  return `${mins < 10 ? '0' + mins : mins}:${secs < 10 ? '0' + secs : secs}`;
};

// 조회수 포맷팅 함수
const formatCount = (count) => {
  if (count < 1000) return count;
  if (count < 1000000) return (count / 1000).toFixed(1) + 'K';
  return (count / 1000000).toFixed(1) + 'M';
};

// 쇼츠 비디오 플레이 토글 함수
const togglePlay = (event) => {
  const video = event.target;
  if (video.paused) {
    video.play();
  } else {
    video.pause();
  }
};

// 비디오 좋아요 토글 함수
const toggleLike = (video) => {
  if (video.liked) {
    // 이미 좋아요를 눌렀다면 취소
    video.likes = (video.likes || 1) - 1;
    video.liked = false;
  } else {
    // 좋아요 추가
    video.likes = (video.likes || 0) + 1;
    video.liked = true;
    
    // 싫어요를 눌렀었다면, 싫어요 취소
    if (video.disliked) {
      video.dislikes = (video.dislikes || 1) - 1;
      video.disliked = false;
    }
  }
  
  // 변경사항 저장
  saveVideosToStorage();
};

// 비디오 싫어요 토글 함수
const toggleDislike = (video) => {
  if (video.disliked) {
    // 이미 싫어요를 눌렀다면 취소
    video.dislikes = (video.dislikes || 1) - 1;
    video.disliked = false;
  } else {
    // 싫어요 추가
    video.dislikes = (video.dislikes || 0) + 1;
    video.disliked = true;
    
    // 좋아요를 눌렀었다면, 좋아요 취소
    if (video.liked) {
      video.likes = (video.likes || 1) - 1;
      video.liked = false;
    }
  }
  
  // 변경사항 저장
  saveVideosToStorage();
};

return {
  showCreateMenu,
  showUploadModal,
  fileInput,
  selectedFile,
  uploading,
  uploadProgress,
  videos,
  videoTitle,
  toggleCreateMenu,
  openUploadModal,
  closeModal,
  triggerFileInput,
  handleFileSelect,
  handleFileDrop,
  formatFileSize,
  formatDate,
  cancelUpload,
  uploadVideo,
  deleteVideo,
  notification,
  showNotification,
  closeNotification,
  notificationList,
  showNotificationPanel,
  toggleNotificationPanel,
  clearAllNotifications,
  formatNotificationTime,
  searchQuery,
  isSearchActive,
  searchVideos,
  filteredVideos,
  displayVideos,
  clearSearch,
  showSearchResults,
  selectSearchResult,
  showSearchPage,
  openSearchPage,
  closeSearchPage,
  showVideoDetail,
  selectedVideo,
  openVideoDetail,
  closeVideoDetail,
  currentView,
  setCurrentView,
  watchHistory,
  addToWatchHistory,
  removeFromHistory,
  clearWatchHistory,
  formatWatchDate,
  watchLaterList,
  addToWatchLater,
  removeFromWatchLater,
  clearWatchLater,
  isInWatchLater,
  subscribedChannels,
  subscriptionVideos,
  getChannelByVideoId,
  subscribeChannel,
  unsubscribeChannel,
  getChannelInitial,
  videoType,
  shortVideos,
  formatDuration,
  formatCount,
  togglePlay,
  toggleLike,
  toggleDislike,
};
</script>

<style>
.app {
  font-family: 'Avenir', Helvetica, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-align: center;
  color: #2c3e50;
  margin-top: 60px;
  display: flex;
}

.sidebar {
  position: fixed;
  top: 60px;
  left: 0;
  width: 120px;
  height: 100vh;
  background-color: white;
  z-index: 90;
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  padding-top: 10px;
}

.sidebar-item {
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: flex-start;
  width: 100%;
  height: 40px;
  cursor: pointer;
  padding-left: 16px;
  margin-bottom: 8px;
}

.sidebar-item:hover, .sidebar-item.active {
  background-color: #f0f0f0;
}

.sidebar-item.active .home-icon {
  color: #000000;
}

.sidebar-item.active .sidebar-text {
  font-weight: bold;
}

.sidebar-item.active .history-icon {
  fill: #000000;
}

.sidebar-item.active .watchlater-icon {
  fill: #000000;
}

.sidebar-icon {
  width: 24px;
  height: 24px;
  margin-right: 16px;
}

.home-icon {
  width: 24px;
  height: 24px;
  fill: transparent;
  color: #606060;
}

.history-icon {
  width: 24px;
  height: 24px;
  fill: #606060;
}

.watchlater-icon {
  width: 24px;
  height: 24px;
  fill: #606060;
}

.sidebar-text {
  font-size: 14px;
  color: #030303;
}

.menu-bar {
  background-color: white;
  width: 100%;
  position: fixed;
  top: 0;
  left: 0;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  z-index: 100;
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 5px 25px;
  height: 60px;
}

.logo-container {
  display: flex;
  align-items: center;
  flex: 1;
  justify-content: flex-start;
}

.search-container {
  flex: 2;
  display: flex;
  justify-content: center;
  align-items: center;
  max-width: 640px;
}

.search-form {
  display: flex;
  width: 100%;
  max-width: 540px;
  position: relative;
}

.search-input {
  width: 100%;
  height: 38px;
  padding: 0 16px;
  font-size: 16px;
  border: 1px solid #ccc;
  border-radius: 2px 0 0 2px;
  outline: none;
}

.search-input:focus {
  border-color: #1c62b9;
  box-shadow: 0 0 0 1px #1c62b9;
}

.search-button {
  width: 64px;
  height: 40px;
  background-color: #f8f8f8;
  border: 1px solid #ccc;
  border-left: none;
  border-radius: 0 2px 2px 0;
  cursor: pointer;
  display: flex;
  justify-content: center;
  align-items: center;
}

.search-button:hover {
  background-color: #f0f0f0;
}

.search-icon {
  width: 24px;
  height: 24px;
  fill: #606060;
}

.action-buttons {
  display: flex;
  justify-content: flex-end;
  align-items: center;
  flex: 1;
  gap: 12px;
  margin-right: 30px;
}

.create-dropdown {
  position: relative;
}

.dropdown-menu {
  position: absolute;
  top: 100%;
  right: 0;
  width: 200px;
  background: white;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
  margin-top: 8px;
  z-index: 150;
  overflow: hidden;
}

.dropdown-item {
  display: flex;
  align-items: center;
  padding: 12px 16px;
  cursor: pointer;
}

.dropdown-item:hover {
  background-color: #f0f0f0;
}

.dropdown-item svg {
  width: 20px;
  height: 20px;
  margin-right: 12px;
  fill: #606060;
}

.dropdown-item span {
  font-size: 14px;
  color: #030303;
}

.create-button {
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: #f1f1f1;
  border: none;
  border-radius: 25px;
  padding: 8px 16px;
  cursor: pointer;
  font-size: 14px;
  font-weight: 500;
  color: #0f0f0f;
  height: 36px;
  min-width: 90px;
}

.create-button:hover {
  background-color: #e5e5e5;
}

.plus-icon {
  font-size: 18px;
  margin-right: 5px;
  font-weight: 300;
  line-height: 1;
}

.create-text {
  line-height: 1;
}

.notification-wrapper {
  position: relative;
  margin-right: 10px;
}

.notification-badge {
  position: absolute;
  top: -5px;
  right: -5px;
  background-color: #FF0000;
  color: white;
  border-radius: 50%;
  width: 18px;
  height: 18px;
  font-size: 12px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: bold;
}

.notification-button {
  background-color: transparent;
  border: none;
  cursor: pointer;
  width: 40px;
  height: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
}

.notification-button:hover {
  background-color: #f0f0f0;
}

.bell-icon {
  width: 24px;
  height: 24px;
  fill: #030303;
}

.youtube-logo {
  display: flex;
  align-items: center;
  cursor: pointer;
}

.play-button {
  width: 40px;
  height: 26px;
  background-color: #FF0000;
  border-radius: 7px;
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
}

.play-button:before {
  content: "";
  width: 0;
  height: 0;
  border-style: solid;
  border-width: 7px 0 7px 10px;
  border-color: transparent transparent transparent white;
  position: absolute;
}

.youtube-text {
  font-weight: bold;
  font-size: 20px;
  margin-left: 3px;
  font-family: 'Arial', sans-serif;
  letter-spacing: -1px;
  color: #000;
}

.kr {
  font-size: 10px;
  vertical-align: super;
  margin-left: 2px;
  font-weight: normal;
}

.menu-bar li {
  padding: 18px 22px;
}

.menu-bar a {
  text-decoration: none;
  color: #333;
  font-weight: bold;
}

header {
  margin-bottom: 30px;
  margin-top: 30px;
}

header h1 {
  color: #FF0000;
  font-size: 32px;
  font-family: 'Arial', sans-serif;
  letter-spacing: -1px;
  margin-top: 80px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.favicon-icon {
  width: 36px;
  height: 25px;
  background-color: #FF0000;
  border-radius: 7px;
  margin-right: 10px;
  position: relative;
  display: inline-flex;
  justify-content: center;
  align-items: center;
}

.favicon-icon:before {
  content: "";
  width: 0;
  height: 0;
  border-style: solid;
  border-width: 6px 0 6px 9px;
  border-color: transparent transparent transparent white;
  position: absolute;
}

footer {
  margin-top: 30px;
  font-size: 0.8em;
  color: #666;
}

/* 모달 스타일 */
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.5);
  z-index: 200;
}

.upload-modal {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 100%;
  max-width: 600px;
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
  z-index: 201;
  overflow: hidden;
}

.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 16px 24px;
  border-bottom: 1px solid #e5e5e5;
}

.modal-header h2 {
  font-size: 18px;
  font-weight: 500;
  margin: 0;
}

.close-button {
  background: transparent;
  border: none;
  font-size: 24px;
  cursor: pointer;
  color: #606060;
}

.modal-content {
  padding: 24px;
}

.upload-area {
  border: 2px dashed #ccc;
  border-radius: 8px;
  padding: 40px 20px;
  text-align: center;
  cursor: pointer;
  margin-bottom: 20px;
}

.upload-area:hover {
  border-color: #1c62b9;
  background-color: #f8f8f8;
}

.upload-cloud-icon {
  width: 48px;
  height: 48px;
  fill: #606060;
  margin-bottom: 8px;
}

.upload-preview {
  background-color: #f8f8f8;
  border-radius: 8px;
  padding: 16px;
  margin-top: 20px;
}

.file-info {
  display: flex;
  justify-content: space-between;
  margin-bottom: 16px;
}

.file-name {
  font-weight: 500;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.upload-actions {
  display: flex;
  justify-content: flex-end;
  gap: 12px;
}

.cancel-button {
  padding: 8px 16px;
  background-color: #f1f1f1;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.upload-button {
  padding: 8px 16px;
  background-color: #1c62b9;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.upload-progress {
  margin-top: 20px;
}

.progress-bar {
  height: 8px;
  background-color: #f1f1f1;
  border-radius: 4px;
  overflow: hidden;
  margin-bottom: 8px;
}

.progress-fill {
  height: 100%;
  background-color: #1c62b9;
  transition: width 0.3s ease;
}

.progress-text {
  text-align: right;
  font-size: 12px;
  color: #606060;
}

/* Main content styles */
.main-content {
  margin-left: 120px;
  width: calc(100% - 120px);
  padding: 20px;
  text-align: left;
}

.videos-container {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  gap: 20px;
  margin-top: 20px;
}

.no-videos {
  grid-column: 1 / -1;
  text-align: center;
  padding: 50px 0;
  color: #606060;
}

.video-card {
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 1px 3px rgba(0,0,0,0.1);
  background-color: white;
  transition: transform 0.2s;
  cursor: pointer;
}

.video-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.video-thumbnail {
  position: relative;
  width: 100%;
  height: 0;
  padding-bottom: 56.25%; /* 16:9 aspect ratio */
  background-color: #f9f9f9;
  overflow: hidden;
}

.video-thumbnail video {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.thumbnail-placeholder {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: #f5f5f5;
}

.refresh-notice {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 16px;
  text-align: center;
}

.refresh-icon {
  width: 40px;
  height: 40px;
  fill: #606060;
  margin-bottom: 12px;
}

.refresh-text {
  color: #606060;
  font-size: 14px;
  line-height: 1.4;
}

.video-placeholder-icon {
  width: 48px;
  height: 48px;
  fill: #606060;
}

.video-info {
  padding: 12px;
}

.video-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 6px;
}

.video-delete-button {
  position: absolute;
  top: 8px;
  right: 8px;
  width: 32px;
  height: 32px;
  background-color: rgba(0, 0, 0, 0.6);
  border: none;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  z-index: 5;
  opacity: 0;
  transition: opacity 0.2s;
}

.video-card:hover .video-delete-button {
  opacity: 1;
}

.video-delete-button:hover {
  background-color: rgba(0, 0, 0, 0.8);
}

.trash-icon {
  width: 18px;
  height: 18px;
  fill: white;
}

.video-title {
  margin: 0;
  font-size: 16px;
  font-weight: 500;
  color: #030303;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  flex: 1;
  margin-right: 8px;
}

.video-details {
  display: flex;
  justify-content: space-between;
  margin: 6px 0 0;
  font-size: 12px;
  color: #606060;
}

.video-size {
  color: #606060;
}

/* 비디오 상세 폼 */
.video-details-form {
  margin-top: 20px;
  margin-bottom: 20px;
}

.form-group {
  margin-bottom: 16px;
}

.form-group label {
  display: block;
  margin-bottom: 8px;
  font-weight: 500;
  color: #030303;
  text-align: left;
}

.form-group input {
  width: 100%;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
  font-size: 14px;
}

/* 알림 창 스타일 */
.notification-container {
  position: fixed;
  top: 20px;
  right: 20px;
  z-index: 1000;
}

.notification {
  display: flex;
  align-items: flex-start;
  width: 320px;
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  overflow: hidden;
  padding: 16px;
  animation: slide-in 0.3s ease-out;
}

@keyframes slide-in {
  from {
    transform: translateX(100%);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}

.notification.success {
  border-left: 4px solid #4CAF50;
}

.notification.error {
  border-left: 4px solid #F44336;
}

.notification-icon {
  margin-right: 12px;
  flex-shrink: 0;
}

.success-icon {
  width: 24px;
  height: 24px;
  fill: #4CAF50;
}

.error-icon {
  width: 24px;
  height: 24px;
  fill: #F44336;
}

.notification-content {
  flex: 1;
}

.notification-title {
  font-weight: 500;
  margin-bottom: 4px;
  color: #333;
}

.notification-message {
  font-size: 14px;
  color: #666;
}

.notification-close {
  background: transparent;
  border: none;
  cursor: pointer;
  padding: 0;
  width: 24px;
  height: 24px;
  display: flex;
  align-items: center;
  justify-content: center;
  margin-left: 8px;
  opacity: 0.5;
  transition: opacity 0.2s;
}

.notification-close:hover {
  opacity: 1;
}

.close-icon {
  width: 16px;
  height: 16px;
  fill: #666;
}

/* 알림 패널 스타일 */
.notification-panel {
  position: absolute;
  top: 100%;
  right: 0;
  width: 320px;
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  margin-top: 8px;
  z-index: 200;
  overflow: hidden;
  max-height: 500px;
  display: flex;
  flex-direction: column;
}

.notification-panel-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 12px 16px;
  border-bottom: 1px solid #e5e5e5;
}

.notification-panel-header h3 {
  margin: 0;
  font-size: 16px;
  font-weight: 500;
}

.clear-all {
  background: none;
  border: none;
  color: #065fd4;
  font-size: 14px;
  cursor: pointer;
  padding: 4px 8px;
}

.clear-all:hover {
  background-color: #f0f0f0;
  border-radius: 4px;
}

.notification-panel-content {
  overflow-y: auto;
  max-height: 450px;
}

.no-notifications {
  padding: 32px 16px;
  text-align: center;
  color: #606060;
  font-size: 14px;
}

.notification-item {
  display: flex;
  padding: 12px 16px;
  border-bottom: 1px solid #e5e5e5;
  cursor: pointer;
}

.notification-item:hover {
  background-color: #f9f9f9;
}

.notification-item-icon {
  margin-right: 12px;
  flex-shrink: 0;
}

.notification-item-content {
  flex: 1;
}

.notification-item-title {
  font-weight: 500;
  margin-bottom: 4px;
  color: #030303;
}

.notification-item-message {
  font-size: 14px;
  color: #606060;
  margin-bottom: 4px;
}

.notification-item-time {
  font-size: 12px;
  color: #909090;
}

/* 검색 결과 헤더 스타일 */
header h2 {
  font-size: 18px;
  font-weight: 500;
  color: #030303;
  margin: 16px 0;
  padding-left: 10px;
}

.search-clear-button {
  position: absolute;
  right: 72px;
  top: 50%;
  transform: translateY(-50%);
  background: transparent;
  border: none;
  height: 40px;
  width: 40px;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  opacity: 0.6;
}

.search-clear-button:hover {
  opacity: 1;
}

.clear-icon {
  width: 18px;
  height: 18px;
  fill: #606060;
}

.search-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin: 16px 0;
  padding: 0 10px;
}

.search-header h2 {
  font-size: 18px;
  font-weight: 500;
  color: #030303;
  margin: 0;
}

.reset-search-button {
  background-color: #f0f0f0;
  border: none;
  border-radius: 18px;
  padding: 6px 12px;
  display: flex;
  align-items: center;
  cursor: pointer;
  font-size: 14px;
  color: #606060;
  transition: background-color 0.2s;
}

.reset-search-button:hover {
  background-color: #e0e0e0;
}

.reset-icon {
  width: 16px;
  height: 16px;
  fill: #606060;
  margin-right: 4px;
}

/* 검색 결과 드롭다운 스타일 */
.search-results-dropdown {
  position: absolute;
  top: 40px;
  left: 0;
  width: 100%;
  background: white;
  border-radius: 0 0 4px 4px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
  z-index: 150;
  max-height: 400px;
  overflow-y: auto;
}

.no-results {
  padding: 16px;
  text-align: center;
  color: #606060;
}

.search-results-list {
  display: flex;
  flex-direction: column;
}

.search-result-item {
  display: flex;
  align-items: center;
  padding: 8px 16px;
  cursor: pointer;
  border-bottom: 1px solid #f0f0f0;
}

.search-result-item:hover {
  background-color: #f8f8f8;
}

.search-result-thumbnail {
  width: 120px;
  height: 68px;
  margin-right: 12px;
  background-color: #f0f0f0;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 4px;
  overflow: hidden;
}

.search-result-thumbnail video {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.search-result-info {
  flex: 1;
  text-align: left;
}

.search-result-title {
  font-size: 14px;
  font-weight: 500;
  color: #030303;
  margin-bottom: 4px;
}

.search-result-meta {
  font-size: 12px;
  color: #606060;
}

.search-clear-button {
  position: absolute;
  right: 70px;
  top: 50%;
  transform: translateY(-50%);
  background: transparent;
  border: none;
  cursor: pointer;
  padding: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 24px;
  height: 24px;
}

.search-clear-button .clear-icon {
  width: 18px;
  height: 18px;
  fill: #606060;
}

.view-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin: 16px 0;
  padding: 0 10px;
}

.view-header h2 {
  font-size: 20px;
  font-weight: 500;
  color: #030303;
  margin: 0;
}

.clear-history-button,
.clear-watchlater-button {
  display: flex;
  align-items: center;
  background-color: #f0f0f0;
  border: none;
  border-radius: 18px;
  padding: 6px 12px;
  cursor: pointer;
  font-size: 14px;
  color: #606060;
  transition: background-color 0.2s;
}

.clear-history-button:hover,
.clear-watchlater-button:hover {
  background-color: #e0e0e0;
}

.clear-history-button .trash-icon,
.clear-watchlater-button .trash-icon {
  width: 16px;
  height: 16px;
  fill: #606060;
  margin-right: 6px;
}

.watch-date {
  color: #606060;
  font-size: 12px;
}

/* 구독 아이콘 스타일 */
.subscriptions-icon {
  width: 24px;
  height: 24px;
  fill: #606060;
}

.sidebar-item.active .subscriptions-icon {
  fill: #000000;
}

/* 구독 채널 목록 스타일 */
.subscribed-channels {
  margin-bottom: 24px;
  border-bottom: 1px solid #e5e5e5;
  padding-bottom: 16px;
}

.subscribed-channels h3 {
  font-size: 16px;
  font-weight: 500;
  margin: 0 0 16px 10px;
  color: #030303;
  text-align: left;
}

.section-title {
  font-size: 16px;
  font-weight: 500;
  margin: 16px 0;
  padding-left: 10px;
  color: #030303;
  text-align: left;
}

.channel-list {
  display: flex;
  flex-wrap: wrap;
  gap: 16px;
  padding: 0 10px;
}

.channel-item {
  display: flex;
  align-items: center;
  background-color: #f8f8f8;
  border-radius: 24px;
  padding: 8px 16px;
  transition: background-color 0.2s;
}

.channel-item:hover {
  background-color: #f0f0f0;
}

.channel-avatar {
  margin-right: 8px;
}

.channel-avatar .avatar-circle {
  width: 32px;
  height: 32px;
  border-radius: 50%;
  background-color: #1c62b9;
  color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: 500;
  font-size: 14px;
}

.channel-name {
  font-size: 14px;
  font-weight: 500;
  color: #030303;
  margin-right: 8px;
}

.unsubscribe-button {
  background-color: #e0e0e0;
  border: none;
  border-radius: 16px;
  padding: 4px 8px;
  font-size: 12px;
  color: #606060;
  cursor: pointer;
  transition: background-color 0.2s;
}

.unsubscribe-button:hover {
  background-color: #d0d0d0;
}

.channel-tag {
  position: absolute;
  top: 8px;
  left: 8px;
  background-color: rgba(0, 0, 0, 0.7);
  color: white;
  padding: 2px 8px;
  border-radius: 4px;
  font-size: 12px;
  font-weight: 500;
}

/* 쇼츠 아이콘 스타일 */
.shorts-icon {
  width: 24px;
  height: 24px;
  fill: #606060;
}

.sidebar-item.active .shorts-icon {
  fill: #000000;
}

/* 쇼츠 컨테이너 스타일 수정 */
.shorts-container {
  padding: 0 10px;
  max-width: 1100px;
  margin: 0 auto;
}

.shorts-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
  gap: 20px;
}

.shorts-card {
  border-radius: 10px;
  overflow: hidden;
  background-color: white;
  box-shadow: 0 2px 6px rgba(0,0,0,0.12);
  transition: transform 0.2s;
  cursor: pointer;
  max-width: 300px;
  margin: 0 auto;
}

.shorts-card:hover {
  transform: translateY(-4px);
  box-shadow: 0 4px 10px rgba(0,0,0,0.18);
}

.shorts-thumbnail {
  position: relative;
  width: 100%;
  padding-bottom: 177.78%; /* 9:16 비율 (쇼츠 비율) */
  background-color: #f9f9f9;
  overflow: hidden;
}

.shorts-badge {
  position: absolute;
  top: 12px;
  right: 12px;
  background-color: #f00;
  color: white;
  font-size: 14px;
  font-weight: bold;
  padding: 4px 8px;
  border-radius: 6px;
}

.shorts-duration {
  position: absolute;
  bottom: 8px;
  right: 8px;
  background-color: rgba(0, 0, 0, 0.7);
  color: white;
  font-size: 12px;
  padding: 2px 4px;
  border-radius: 2px;
}

.shorts-info {
  padding: 16px;
}

.shorts-video-title {
  margin: 0 0 8px 0;
  font-size: 16px;
  font-weight: 500;
  color: #030303;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.views-count {
  color: #606060;
  margin-right: 8px;
}

/* 업로드 폼 스타일 추가 */
.radio-group {
  display: flex;
  gap: 16px;
  margin-top: 8px;
}

.radio-label {
  display: flex;
  align-items: center;
  cursor: pointer;
}

.radio-label input {
  margin-right: 8px;
}

/* 추가 스타일 */
.large-icon {
  width: 72px;
  height: 72px;
  fill: #606060;
}

/* 쇼츠 스크롤 컨테이너 스타일 */
.shorts-scroll {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 32px;
  max-width: 480px;
  margin: 0 auto;
  padding-bottom: 40px;
}

/* 쇼츠 카드 스타일 수정 */
.shorts-card {
  border-radius: 12px;
  overflow: hidden;
  background-color: white;
  box-shadow: 0 2px 10px rgba(0,0,0,0.15);
  width: 100%;
  max-width: 480px;
  margin: 0 auto;
}

/* 쇼츠 썸네일 스타일 */
.shorts-thumbnail {
  position: relative;
  width: 100%;
  padding-bottom: 177.78%; /* 9:16 비율 (쇼츠 비율) */
  background-color: #000;
  overflow: hidden;
}

.shorts-thumbnail video {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
  cursor: pointer;
}

/* 쇼츠 액션 버튼 스타일 */
.shorts-actions {
  display: flex;
  justify-content: space-between;
  margin-top: 12px;
}

.shorts-action-button {
  background: transparent;
  border: none;
  padding: 8px;
  display: flex;
  flex-direction: column;
  align-items: center;
  cursor: pointer;
  color: #606060;
  font-size: 12px;
  font-weight: 500;
}

.shorts-action-button svg {
  width: 24px;
  height: 24px;
  fill: #606060;
  margin-bottom: 4px;
}

.shorts-action-button:hover {
  color: #030303;
}

.shorts-action-button:hover svg {
  fill: #030303;
}

.like-button:hover svg,
.dislike-button:hover svg {
  fill: #065fd4;
}

.comment-button:hover svg {
  fill: #065fd4;
}

.share-button:hover svg {
  fill: #065fd4;
}

/* 좋아요/싫어요 버튼 활성화 스타일 */
.shorts-action-button.active {
  color: #065fd4;
}

.shorts-action-button.active svg {
  fill: #065fd4;
}

/* 좋아요 버튼 애니메이션 */
@keyframes like-animation {
  0% { transform: scale(1); }
  50% { transform: scale(1.2); }
  100% { transform: scale(1); }
}

.shorts-action-button.like-button:active svg,
.shorts-action-button.dislike-button:active svg {
  animation: like-animation 0.3s ease;
}
</style> 